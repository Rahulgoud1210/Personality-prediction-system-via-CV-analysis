{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Task 3 - Personality Prediction System via CV Analysis @CodeClause\n",
    "## Name: Mohammad Ammar\n",
    "# -----------------------------------------------------------------------------------------------------------\n",
    "\n",
    "### 1. Libraries\n",
    "### 2. Data Preview\n",
    "### 3. List of posts\n",
    "### 4.Distribution of the MBTI personality types\n",
    "### 5. Add columns for the type Indicators\n",
    "### 6. Pearson Features Correlation\n",
    "### 7. Prepare data\n",
    "### 8. Vectorize with count and tf-idf\n",
    "### 9. X / Y data\n",
    "### 10. First XGBoost model for MBTI dataset\n",
    "### 11. Monitor Performance and Early Stopping\n",
    "### 12. Show feature importance plot and list for the first indicator\n",
    "### 13. XGBoost Hyperparameter Tuning\n",
    "### 14. Predict own Myers-Briggs Personality Type \n",
    "### 15. Fit and predict the 4 type indicators:\n",
    "### 16. Show result"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Import Iibrary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "_cell_guid": "0e10c6de-685a-4e93-9925-7d73cb27497c",
    "_uuid": "a0f7e95a8994cea779577c48c3d22cde3fdf2cc5",
    "execution": {
     "iopub.execute_input": "2022-12-07T13:34:36.283048Z",
     "iopub.status.busy": "2022-12-07T13:34:36.282657Z",
     "iopub.status.idle": "2022-12-07T13:34:36.994190Z",
     "shell.execute_reply": "2022-12-07T13:34:36.992668Z",
     "shell.execute_reply.started": "2022-12-07T13:34:36.282987Z"
    }
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import re\n",
    "\n",
    "# plotting\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "# read data\n",
    "data = pd.read_csv('mbti_1.csv') "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_cell_guid": "376de180-026c-46c1-8dfa-e2550edd0955",
    "_uuid": "840ae5aa20a5c29b983be8c45928862c299b9792"
   },
   "source": [
    "## 2. Data preview"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "_cell_guid": "315f710c-371f-4c9d-87f0-13fbc0e29047",
    "_uuid": "03a18534be1141ebff5875c48f7075995f23ca60",
    "execution": {
     "iopub.execute_input": "2022-12-07T13:34:36.996237Z",
     "iopub.status.busy": "2022-12-07T13:34:36.995872Z",
     "iopub.status.idle": "2022-12-07T13:34:37.018358Z",
     "shell.execute_reply": "2022-12-07T13:34:37.017386Z",
     "shell.execute_reply.started": "2022-12-07T13:34:36.996176Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>type</th>\n",
       "      <th>posts</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>INFJ</td>\n",
       "      <td>'http://www.youtube.com/watch?v=qsXHcwe3krw|||...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ENTP</td>\n",
       "      <td>'I'm finding the lack of me in these posts ver...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>INTP</td>\n",
       "      <td>'Good one  _____   https://www.youtube.com/wat...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>INTJ</td>\n",
       "      <td>'Dear INTP,   I enjoyed our conversation the o...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ENTJ</td>\n",
       "      <td>'You're fired.|||That's another silly misconce...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>INTJ</td>\n",
       "      <td>'18/37 @.@|||Science  is not perfect. No scien...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>INFJ</td>\n",
       "      <td>'No, I can't draw on my own nails (haha). Thos...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>INTJ</td>\n",
       "      <td>'I tend to build up a collection of things on ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>INFJ</td>\n",
       "      <td>I'm not sure, that's a good question. The dist...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>INTP</td>\n",
       "      <td>'https://www.youtube.com/watch?v=w8-egj0y8Qs||...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   type                                              posts\n",
       "0  INFJ  'http://www.youtube.com/watch?v=qsXHcwe3krw|||...\n",
       "1  ENTP  'I'm finding the lack of me in these posts ver...\n",
       "2  INTP  'Good one  _____   https://www.youtube.com/wat...\n",
       "3  INTJ  'Dear INTP,   I enjoyed our conversation the o...\n",
       "4  ENTJ  'You're fired.|||That's another silly misconce...\n",
       "5  INTJ  '18/37 @.@|||Science  is not perfect. No scien...\n",
       "6  INFJ  'No, I can't draw on my own nails (haha). Thos...\n",
       "7  INTJ  'I tend to build up a collection of things on ...\n",
       "8  INFJ  I'm not sure, that's a good question. The dist...\n",
       "9  INTP  'https://www.youtube.com/watch?v=w8-egj0y8Qs||..."
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_cell_guid": "bda2db8c-c9c6-446b-a40e-f86241d60619",
    "_uuid": "2d145f588ec28c76d0c757d53e3b657e21c4e7a9"
   },
   "source": [
    "## 3. List of posts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "_cell_guid": "05abe1d2-7acd-4f20-9539-be413c76822b",
    "_uuid": "14c6ff28cd51d9969324fecb6a53b05ca5584069",
    "execution": {
     "iopub.execute_input": "2022-12-07T13:34:37.020247Z",
     "iopub.status.busy": "2022-12-07T13:34:37.019787Z",
     "iopub.status.idle": "2022-12-07T13:34:37.037978Z",
     "shell.execute_reply": "2022-12-07T13:34:37.036842Z",
     "shell.execute_reply.started": "2022-12-07T13:34:37.020180Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[\"'http://www.youtube.com/watch?v=qsXHcwe3krw\",\n",
       "  'http://41.media.tumblr.com/tumblr_lfouy03PMA1qa1rooo1_500.jpg',\n",
       "  'enfp and intj moments  https://www.youtube.com/watch?v=iz7lE1g4XM4  sportscenter not top ten plays  https://www.youtube.com/watch?v=uCdfze1etec  pranks',\n",
       "  'What has been the most life-changing experience in your life?',\n",
       "  'http://www.youtube.com/watch?v=vXZeYwwRDw8   http://www.youtube.com/watch?v=u8ejam5DP3E  On repeat for most of today.',\n",
       "  'May the PerC Experience immerse you.',\n",
       "  'The last thing my INFJ friend posted on his facebook before committing suicide the next day. Rest in peace~   http://vimeo.com/22842206',\n",
       "  \"Hello ENFJ7. Sorry to hear of your distress. It's only natural for a relationship to not be perfection all the time in every moment of existence. Try to figure the hard times as times of growth, as...\",\n",
       "  '84389  84390  http://wallpaperpassion.com/upload/23700/friendship-boy-and-girl-wallpaper.jpg  http://assets.dornob.com/wp-content/uploads/2010/04/round-home-design.jpg ...',\n",
       "  'Welcome and stuff.',\n",
       "  'http://playeressence.com/wp-content/uploads/2013/08/RED-red-the-pokemon-master-32560474-450-338.jpg  Game. Set. Match.',\n",
       "  \"Prozac, wellbrutin, at least thirty minutes of moving your legs (and I don't mean moving them while sitting in your same desk chair), weed in moderation (maybe try edibles as a healthier alternative...\",\n",
       "  \"Basically come up with three items you've determined that each type (or whichever types you want to do) would more than likely use, given each types' cognitive functions and whatnot, when left by...\",\n",
       "  'All things in moderation.  Sims is indeed a video game, and a good one at that. Note: a good one at that is somewhat subjective in that I am not completely promoting the death of any given Sim...',\n",
       "  'Dear ENFP:  What were your favorite video games growing up and what are your now, current favorite video games? :cool:',\n",
       "  'https://www.youtube.com/watch?v=QyPqT8umzmY',\n",
       "  'It appears to be too late. :sad:',\n",
       "  \"There's someone out there for everyone.\",\n",
       "  'Wait... I thought confidence was a good thing.',\n",
       "  \"I just cherish the time of solitude b/c i revel within my inner world more whereas most other time i'd be workin... just enjoy the me time while you can. Don't worry, people will always be around to...\",\n",
       "  \"Yo entp ladies... if you're into a complimentary personality,well, hey.\",\n",
       "  '... when your main social outlet is xbox live conversations and even then you verbally fatigue quickly.',\n",
       "  'http://www.youtube.com/watch?v=gDhy7rdfm14  I really dig the part from 1:46 to 2:50',\n",
       "  'http://www.youtube.com/watch?v=msqXffgh7b8',\n",
       "  'Banned because this thread requires it of me.',\n",
       "  'Get high in backyard, roast and eat marshmellows in backyard while conversing over something intellectual, followed by massages and kisses.',\n",
       "  'http://www.youtube.com/watch?v=Mw7eoU3BMbE',\n",
       "  'http://www.youtube.com/watch?v=4V2uYORhQOk',\n",
       "  'http://www.youtube.com/watch?v=SlVmgFQQ0TI',\n",
       "  \"Banned for too many b's in that sentence. How could you! Think of the B!\",\n",
       "  'Banned for watching movies in the corner with the dunces.',\n",
       "  'Banned because Health class clearly taught you nothing about peer pressure.',\n",
       "  'Banned for a whole host of reasons!',\n",
       "  'http://www.youtube.com/watch?v=IRcrv41hgz4',\n",
       "  \"1) Two baby deer on left and right munching on a beetle in the middle.  2) Using their own blood, two cavemen diary today's latest happenings on their designated cave diary wall.  3) I see it as...\",\n",
       "  'a pokemon world  an infj society  everyone becomes an optimist',\n",
       "  '49142',\n",
       "  'http://www.youtube.com/watch?v=ZRCEq_JFeFM',\n",
       "  'http://discovermagazine.com/2012/jul-aug/20-things-you-didnt-know-about-deserts/desert.jpg',\n",
       "  'http://oyster.ignimgs.com/mediawiki/apis.ign.com/pokemon-silver-version/d/dd/Ditto.gif',\n",
       "  'http://www.serebii.net/potw-dp/Scizor.jpg',\n",
       "  \"Not all artists are artists because they draw. It's the idea that counts in forming something of your own... like a signature.\",\n",
       "  \"Welcome to the robot ranks, person who downed my self-esteem cuz I'm not an avid signature artist like herself. :proud:\",\n",
       "  'Banned for taking all the room under my bed. Ya gotta learn to share with the roaches.',\n",
       "  'http://www.youtube.com/watch?v=w8IgImn57aQ',\n",
       "  'Banned for being too much of a thundering, grumbling kind of storm... yep.',\n",
       "  \"Ahh... old high school music I haven't heard in ages.   http://www.youtube.com/watch?v=dcCRUPCdB1w\",\n",
       "  \"I failed a public speaking class a few years ago and I've sort of learned what I could do better were I to be in that position again. A big part of my failure was just overloading myself with too...\",\n",
       "  \"I like this person's mentality. He's a confirmed INTJ by the way. http://www.youtube.com/watch?v=hGKLI-GEc6M\",\n",
       "  \"Move to the Denver area and start a new life for myself.'\"],\n",
       " [\"'I'm finding the lack of me in these posts very alarming.\",\n",
       "  \"Sex can be boring if it's in the same position often. For example me and my girlfriend are currently in an environment where we have to creatively use cowgirl and missionary. There isn't enough...\",\n",
       "  \"Giving new meaning to 'Game' theory.\",\n",
       "  \"Hello *ENTP Grin*  That's all it takes. Than we converse and they do most of the flirting while I acknowledge their presence and return their words with smooth wordplay and more cheeky grins.\",\n",
       "  'This + Lack of Balance and Hand Eye Coordination.',\n",
       "  \"Real IQ test I score 127. Internet IQ tests are funny. I score 140s or higher.  Now, like the former responses of this thread I will mention that I don't believe in the IQ test. Before you banish...\",\n",
       "  \"You know you're an ENTP when you vanish from a site for a year and a half, return, and find people are still commenting on your posts and liking your ideas/thoughts. You know you're an ENTP when you...\",\n",
       "  'http://img188.imageshack.us/img188/6422/6020d1f9da6944a6b71bbe6.jpg',\n",
       "  'http://img.adultdvdtalk.com/813a0c6243814cab84c51',\n",
       "  'I over think things sometimes. I go by the old Sherlock Holmes quote.  Perhaps, when a man has special knowledge and special powers like my  own, it rather encourages him to seek a complex...',\n",
       "  'cheshirewolf.tumblr.com  So is I :D',\n",
       "  '400,000+  post',\n",
       "  \"Not really; I've never thought of E/I or J/P as real functions.  I judge myself on what I use. I use Ne and Ti as my dominates. Fe for emotions and rarely Si. I also use Ni due to me strength...\",\n",
       "  'You know though. That was ingenious. After saying it I really want to try it and see what happens with me playing a first person shooter in the back while we drive around. I want to see the look on...',\n",
       "  \"out of all of them the rock paper one is the best. It makes me lol.  You guys are lucky :D I'm really high up on the tumblr system.\",\n",
       "  \"So did you hear about that new first person shooter game? I've been rocking the hell out of the soundtrack on my auto sound equipment that will shake the heavens. We managed to put a couple PS3's in...\",\n",
       "  'No; The way he connected things was very Ne. Ne dominates are just as aware of their environments as Se dominates.  Example: Shawn Spencer or Patrick Jane; Both ENTPs.',\n",
       "  \"Well charlie I will be the first to admit I do get jealous like you do. I chalk it up to my 4w3 heart mixed with my dominate 7w8. 7s and 8s both like to be noticed. 4's like to be known (not the same...\",\n",
       "  \";D I'll upload the same clip with the mic away from my mouth. Than you won't hear anything.  Ninja Assassin style but with splatter.\",\n",
       "  'Tik Tok is a really great song. As long as you can mental block out the singer. I love the beat it makes me bounce.',\n",
       "  'drop.io v1swck0  :D Mic really close to my mouth and smokin aces: assassins ball playing in the background.',\n",
       "  \"Sociable =/= extrovert; I'm an extrovert and I'm not sociable. :)\",\n",
       "  \"Sherlock in the movie was an ENTP. Normally he's played as a EXTJ. In the books he's an ESTJ.  As I said. The movie looked good except for it being called sherlock holmes.\",\n",
       "  'http://i817.photobucket.com/albums/zz96/kamioo/Dirtywinch.png',\n",
       "  \"Oh, I never had fear of kissing a guy. I will kiss an animal too. So there was nothing to vanish. Just personal taste and me not liking it.  The guy I kissed didn't know me. It was one of those...\",\n",
       "  \"Sounds pretty much like my area and what I'm going through right now trying to figure out which way I want to take my life. I want to do so many things. The biggest problem is that I know if I don't...\",\n",
       "  ';D I was operating under the impression that you were female. I never looked at your boxy. Okay, I help out my gay friends all the time and one of them has developed a little crush on me. I get red...',\n",
       "  \"T_T You just described me  and I'm living the worst nightmare. I'm trapped in one place with one one around. Only dull woods. If I was a serial killer this would be the perfect place but sadly I'm...\",\n",
       "  'TBH, and biased, sounds like a shadowed INFP. I think maybe he was hurt and turned ESTJ. I can tell because he has some of the typical INFP traits left over.',\n",
       "  \"*Checks list* I'm sorry. It seems that you have came at a bad time. We've already reached our quota of INFJs. However, being you're female and I like females I will make you a deal. I will kick one...\",\n",
       "  \"I'm ANTP (Leaning toward E). I'm easy for both ENTPs and INTPs to identify with. :)\",\n",
       "  \"I also imagine ENTP's interrogations would go a little bit like Jack's from 24 except more mechanical. Rigging up shock treatment equipment in an abandoned building out of an old car batty, jumper...\",\n",
       "  \"It was a compliment :) Trust me. I'm just as psychopathic :D except I have emoticons. They're just weird ones. Like laughing when I get hurt or at people running themselves over with their lawn mower...\",\n",
       "  'http://i817.photobucket.com/albums/zz96/kamioo/Thunderstorm.pnghttp://i817.photobucket.com/albums/zz96/kamioo/Thunderstormbw.png http://i817.photobucket.com/albums/zz96/kamioo/Cosmicstorm.png',\n",
       "  \"No. It's like a theme for where I live and that is why I know it by heart.   http://www.youtube.com/watch?v=j5W73HaVQBg\",\n",
       "  \"and I usual don't leave until the thing ends. But in the mean time. In between times. You work your thing. I'll work mine :D  ;D I'm the MBP; Pleasure to meet you.\",\n",
       "  'Damn, need to trust my instincts more I would have been closer I was going to say INFP.',\n",
       "  'EXFP? Leaning toward S with the way she responded.  :D My friends, even my gay and lesbian ones, always come to me for advice.',\n",
       "  \"I bow to my entp masters ENTPs are so great. If it wasn't for ENTPs I wouldn't have been able to build what I'm building  Duck Duck  Duck  Shotgun\",\n",
       "  'What? Me? I never do that >.> <.<',\n",
       "  \"Because its hard to be sad about losing someone you like when you knew you were right and give yourself a big pat on the back because you're awesome and always correct.\",\n",
       "  \"Oh, you don't have to tell me that most of them are stupid. I know this. That is why I play with them and it makes me laugh. :D As I'm going to take Neuropsychology and I have a few psychologist...\",\n",
       "  \":D I'm a Nightowl. I wake up between 6-7pm and stay awake till 10-11:30am.\",\n",
       "  'Personal opinion backed by theory would suggest that INTPs are the most socially difficult. While INTJs can be socially indifferent but they will also use social situations if the the need arises....',\n",
       "  \"Personal stocks that I have on my desktop that I've downloaded from random stock sites and stock photobuckets.\",\n",
       "  \"I'll tell you when I open photoshop.  :) Glad you like it static.\",\n",
       "  ':D Thanks.',\n",
       "  'http://i817.photobucket.com/albums/zz96/kamioo/Deathgrip.png http://i817.photobucket.com/albums/zz96/kamioo/Deathgripbw.png  Made for a friend. Several hours of work. I constructed every line by...',\n",
       "  \":) Static: http://i817.photobucket.com/albums/zz96/kamioo/Statickitten.png  I'll have to get to your avatar later if one of my fellow teammates doesn't.\",\n",
       "  \"Psychologist don't keep me around long enough to diagnosis me. I like to toy with them. What I have diagnosis myself with and had a few psychologist friends (+ a few other friends) tell me I have is...'\"]]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[p.split('|||') for p in data.head(2).posts.values]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_cell_guid": "24c37003-e27e-4278-aa92-0884c595f1b3",
    "_uuid": "79b9bb46f0aeba9d734a35bfdffedb7ad90ff51c"
   },
   "source": [
    "## 4.Distribution of the MBTI personality types"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "_cell_guid": "de987f70-aab9-45f0-958c-e40118a044e1",
    "_uuid": "9ed4e6e21c4ff484425bb8ba73fa901253e78e2c",
    "execution": {
     "iopub.execute_input": "2022-12-07T13:34:37.039942Z",
     "iopub.status.busy": "2022-12-07T13:34:37.039496Z",
     "iopub.status.idle": "2022-12-07T13:34:37.399197Z",
     "shell.execute_reply": "2022-12-07T13:34:37.398203Z",
     "shell.execute_reply.started": "2022-12-07T13:34:37.039870Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f5ccde72eb8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cnt_types = data['type'].value_counts()\n",
    "\n",
    "plt.figure(figsize=(12,4))\n",
    "sns.barplot(cnt_types.index, cnt_types.values, alpha=0.8)\n",
    "plt.ylabel('Number of Occurrences', fontsize=12)\n",
    "plt.xlabel('Types', fontsize=12)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_cell_guid": "f06f1a50-5d6b-4f57-b191-c65a1ec5e73b",
    "_uuid": "90bc9f8eade59e0b71f0a0601c58ac239dafc84b"
   },
   "source": [
    "#### ... unbalanced occurrences. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_cell_guid": "85d7b45f-d1bc-4d1e-a179-73bfe427fdd4",
    "_uuid": "f00d268818a332dd819e3eaa54cf1d8bd4523cb5"
   },
   "source": [
    "## 5. Add columns for the type Indicators"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "_cell_guid": "94fe02d5-753c-4a2c-bd10-dc3efb44ad80",
    "_uuid": "56607eaad0911f4987c919ca9935203db90550ea",
    "execution": {
     "iopub.execute_input": "2022-12-07T13:34:37.401218Z",
     "iopub.status.busy": "2022-12-07T13:34:37.400838Z",
     "iopub.status.idle": "2022-12-07T13:34:40.089528Z",
     "shell.execute_reply": "2022-12-07T13:34:40.088933Z",
     "shell.execute_reply.started": "2022-12-07T13:34:37.401146Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>type</th>\n",
       "      <th>posts</th>\n",
       "      <th>IE</th>\n",
       "      <th>JP</th>\n",
       "      <th>NS</th>\n",
       "      <th>TF</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>INFJ</td>\n",
       "      <td>'http://www.youtube.com/watch?v=qsXHcwe3krw|||...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ENTP</td>\n",
       "      <td>'I'm finding the lack of me in these posts ver...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>INTP</td>\n",
       "      <td>'Good one  _____   https://www.youtube.com/wat...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>INTJ</td>\n",
       "      <td>'Dear INTP,   I enjoyed our conversation the o...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ENTJ</td>\n",
       "      <td>'You're fired.|||That's another silly misconce...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   type                                              posts  IE  JP  NS  TF\n",
       "0  INFJ  'http://www.youtube.com/watch?v=qsXHcwe3krw|||...   1   1   1   0\n",
       "1  ENTP  'I'm finding the lack of me in these posts ver...   0   0   1   1\n",
       "2  INTP  'Good one  _____   https://www.youtube.com/wat...   1   0   1   1\n",
       "3  INTJ  'Dear INTP,   I enjoyed our conversation the o...   1   1   1   1\n",
       "4  ENTJ  'You're fired.|||That's another silly misconce...   0   1   1   1"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def get_types(row):\n",
    "    t=row['type']\n",
    "\n",
    "    I = 0; N = 0\n",
    "    T = 0; J = 0\n",
    "    \n",
    "    if t[0] == 'I': I = 1\n",
    "    elif t[0] == 'E': I = 0\n",
    "    else: print('I-E incorrect')\n",
    "        \n",
    "    if t[1] == 'N': N = 1\n",
    "    elif t[1] == 'S': N = 0\n",
    "    else: print('N-S incorrect')\n",
    "        \n",
    "    if t[2] == 'T': T = 1\n",
    "    elif t[2] == 'F': T = 0\n",
    "    else: print('T-F incorrect')\n",
    "        \n",
    "    if t[3] == 'J': J = 1\n",
    "    elif t[3] == 'P': J = 0\n",
    "    else: print('J-P incorrect')\n",
    "    return pd.Series( {'IE':I, 'NS':N , 'TF': T, 'JP': J }) \n",
    "\n",
    "data = data.join(data.apply (lambda row: get_types (row),axis=1))\n",
    "data.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "_cell_guid": "f64d512c-d2b2-4494-832b-79c32eeba584",
    "_uuid": "cb604f55d0de8d78f8f8739673661eb2c9976303",
    "execution": {
     "iopub.execute_input": "2022-12-07T13:34:40.091463Z",
     "iopub.status.busy": "2022-12-07T13:34:40.090945Z",
     "iopub.status.idle": "2022-12-07T13:34:40.108517Z",
     "shell.execute_reply": "2022-12-07T13:34:40.107830Z",
     "shell.execute_reply.started": "2022-12-07T13:34:40.091400Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Introversion (I) /  Extroversion (E):\t 1999  /  6676\n",
      "Intuition (N) – Sensing (S):\t\t 1197  /  7478\n",
      "Thinking (T) – Feeling (F):\t\t 4694  /  3981\n",
      "Judging (J) – Perceiving (P):\t\t 5241  /  3434\n"
     ]
    }
   ],
   "source": [
    "print (\"Introversion (I) /  Extroversion (E):\\t\", data['IE'].value_counts()[0], \" / \", data['IE'].value_counts()[1])\n",
    "print (\"Intuition (N) – Sensing (S):\\t\\t\", data['NS'].value_counts()[0], \" / \", data['NS'].value_counts()[1])\n",
    "print (\"Thinking (T) – Feeling (F):\\t\\t\", data['TF'].value_counts()[0], \" / \", data['TF'].value_counts()[1])\n",
    "print (\"Judging (J) – Perceiving (P):\\t\\t\", data['JP'].value_counts()[0], \" / \", data['JP'].value_counts()[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "_cell_guid": "106d4032-2cb6-424e-95af-ee73643c4ea9",
    "_uuid": "71300a00fb90466c0fe86e131d0f1dc158cb4765",
    "execution": {
     "iopub.execute_input": "2022-12-07T13:34:40.110069Z",
     "iopub.status.busy": "2022-12-07T13:34:40.109500Z",
     "iopub.status.idle": "2022-12-07T13:34:40.248794Z",
     "shell.execute_reply": "2022-12-07T13:34:40.248055Z",
     "shell.execute_reply.started": "2022-12-07T13:34:40.110018Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f5ccde2f7b8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "N = 4\n",
    "but = (data['IE'].value_counts()[0], data['NS'].value_counts()[0], data['TF'].value_counts()[0], data['JP'].value_counts()[0])\n",
    "top = (data['IE'].value_counts()[1], data['NS'].value_counts()[1], data['TF'].value_counts()[1], data['JP'].value_counts()[1])\n",
    "\n",
    "ind = np.arange(N)    # the x locations for the groups\n",
    "width = 0.7      # the width of the bars: can also be len(x) sequence\n",
    "\n",
    "p1 = plt.bar(ind, but, width)\n",
    "p2 = plt.bar(ind, top, width, bottom=but)\n",
    "\n",
    "plt.ylabel('Count')\n",
    "plt.title('Distribution accoss types indicators')\n",
    "plt.xticks(ind, ('I/E',  'N/S', 'T/F', 'J/P',))\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_cell_guid": "1cbe5f98-511c-4732-b7eb-058a17827726",
    "_uuid": "8b015bb2f565b95c85bbcfbc57f9b1ed8d64c2d1"
   },
   "source": [
    "## 6. Pearson Features Correlation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "_cell_guid": "abe4c46c-0f10-400d-ba5e-6e9a061d1a16",
    "_uuid": "f40a9b83141b40e8dd820045a5240d378851b3a2",
    "execution": {
     "iopub.execute_input": "2022-12-07T13:34:40.250279Z",
     "iopub.status.busy": "2022-12-07T13:34:40.249883Z",
     "iopub.status.idle": "2022-12-07T13:34:40.265571Z",
     "shell.execute_reply": "2022-12-07T13:34:40.264671Z",
     "shell.execute_reply.started": "2022-12-07T13:34:40.250225Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>IE</th>\n",
       "      <th>NS</th>\n",
       "      <th>TF</th>\n",
       "      <th>JP</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>IE</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.045899</td>\n",
       "      <td>-0.069573</td>\n",
       "      <td>0.161939</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NS</th>\n",
       "      <td>-0.045899</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.080954</td>\n",
       "      <td>0.014922</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TF</th>\n",
       "      <td>-0.069573</td>\n",
       "      <td>-0.080954</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.004673</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>JP</th>\n",
       "      <td>0.161939</td>\n",
       "      <td>0.014922</td>\n",
       "      <td>-0.004673</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          IE        NS        TF        JP\n",
       "IE  1.000000 -0.045899 -0.069573  0.161939\n",
       "NS -0.045899  1.000000 -0.080954  0.014922\n",
       "TF -0.069573 -0.080954  1.000000 -0.004673\n",
       "JP  0.161939  0.014922 -0.004673  1.000000"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[['IE','NS','TF','JP']].corr()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_cell_guid": "9609cbe7-3991-4253-9667-444e79465708",
    "_uuid": "119725c5f75ff48f02366b94c7c02f58e8e1ee6a"
   },
   "source": [
    "\n",
    "\n",
    "Unclear if the matrix shows anything valuable for interpretation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "_cell_guid": "008a46e0-73dc-46ed-94af-0272a518fb65",
    "_uuid": "5033669fbfadff1fd6efac9d5d35440e6fa29dd3",
    "execution": {
     "iopub.execute_input": "2022-12-07T13:34:40.267067Z",
     "iopub.status.busy": "2022-12-07T13:34:40.266784Z",
     "iopub.status.idle": "2022-12-07T13:34:40.564707Z",
     "shell.execute_reply": "2022-12-07T13:34:40.564007Z",
     "shell.execute_reply.started": "2022-12-07T13:34:40.267023Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f5ccde72908>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f5ccde72160>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cmap = plt.cm.RdBu\n",
    "corr = data[['IE','NS','TF','JP']].corr()\n",
    "plt.figure(figsize=(12,10))\n",
    "plt.title('Pearson Features Correlation', size=15)\n",
    "sns.heatmap(corr, cmap=cmap,  annot=True, linewidths=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_cell_guid": "2f84a821-2f1f-44eb-821e-a384b617abc2",
    "_uuid": "0fa544cd379bc6524ee8c6158d08dd3ce9d6a7fd"
   },
   "source": [
    "## 7. Prepare data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_cell_guid": "cf133eb4-f85c-42f5-9820-91c70f130bbb",
    "_uuid": "1f25930f84536cbefb11a9c015e25e2bddf88468"
   },
   "source": [
    "Binarize Type Indicator (better implemenation than mine above)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "_cell_guid": "8ab0a44e-70c7-4876-aa9c-fd6a552ecf94",
    "_uuid": "5c0185231d1dec0773ac8574677dec7a641d5409",
    "execution": {
     "iopub.execute_input": "2022-12-07T13:34:40.566205Z",
     "iopub.status.busy": "2022-12-07T13:34:40.565776Z",
     "iopub.status.idle": "2022-12-07T13:34:40.581777Z",
     "shell.execute_reply": "2022-12-07T13:34:40.581035Z",
     "shell.execute_reply.started": "2022-12-07T13:34:40.566157Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Binarize MBTI list: \n",
      "[[0 0 0 0]\n",
      " [1 0 1 1]\n",
      " [0 0 1 1]\n",
      " [0 0 1 0]]\n"
     ]
    }
   ],
   "source": [
    "b_Pers = {'I':0, 'E':1, 'N':0, 'S':1, 'F':0, 'T':1, 'J':0, 'P':1}\n",
    "b_Pers_list = [{0:'I', 1:'E'}, {0:'N', 1:'S'}, {0:'F', 1:'T'}, {0:'J', 1:'P'}]\n",
    "\n",
    "def translate_personality(personality):\n",
    "    # transform mbti to binary vector\n",
    "    \n",
    "    return [b_Pers[l] for l in personality]\n",
    "\n",
    "def translate_back(personality):\n",
    "    # transform binary vector to mbti personality\n",
    "    \n",
    "    s = \"\"\n",
    "    for i, l in enumerate(personality):\n",
    "        s += b_Pers_list[i][l]\n",
    "    return s\n",
    "\n",
    "# Check ...\n",
    "d = data.head(4)\n",
    "list_personality_bin = np.array([translate_personality(p) for p in d.type])\n",
    "print(\"Binarize MBTI list: \\n%s\" % list_personality_bin)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "_cell_guid": "0cb4844b-3205-4eed-9af5-949c79de3fcd",
    "_uuid": "e3d320caec234f9b36f1eb5221764f94b73ec608"
   },
   "outputs": [],
   "source": [
    "### Preprocessing posts\n",
    "* Remove urls \n",
    "* Keep only words and put everything lowercase\n",
    "* Lemmatize each word \n",
    "* __Remove MBTI profiles strings. Too many appear in the posts!__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "_cell_guid": "e1421b79-1fa2-4a4a-bccf-e234223a9bd6",
    "_uuid": "77420dbbc4a8f7ff8984f342562b505571dfe677",
    "execution": {
     "iopub.status.busy": "2022-12-07T13:47:21.678168Z",
     "iopub.status.idle": "2022-12-07T13:47:21.678531Z"
    }
   },
   "outputs": [],
   "source": [
    "##### Compute list of subject with Type | list of comments \n",
    "from nltk.stem import PorterStemmer, WordNetLemmatizer\n",
    "from nltk.corpus import stopwords \n",
    "from nltk import word_tokenize\n",
    "\n",
    "# We want to remove these from the psosts\n",
    "unique_type_list = ['INFJ', 'ENTP', 'INTP', 'INTJ', 'ENTJ', 'ENFJ', 'INFP', 'ENFP',\n",
    "       'ISFP', 'ISTP', 'ISFJ', 'ISTJ', 'ESTP', 'ESFP', 'ESTJ', 'ESFJ']\n",
    "  \n",
    "unique_type_list = [x.lower() for x in unique_type_list]\n",
    "\n",
    "\n",
    "# Lemmatize\n",
    "stemmer = PorterStemmer()\n",
    "lemmatiser = WordNetLemmatizer()\n",
    "\n",
    "# Cache the stop words for speed \n",
    "cachedStopWords = stopwords.words(\"english\")\n",
    "\n",
    "def pre_process_data(data, remove_stop_words=True, remove_mbti_profiles=True):\n",
    "\n",
    "    list_personality = []\n",
    "    list_posts = []\n",
    "    len_data = len(data)\n",
    "    i=0\n",
    "    \n",
    "    for row in data.iterrows():\n",
    "        i+=1\n",
    "        if (i % 500 == 0 or i == 1 or i == len_data):\n",
    "            print(\"%s of %s rows\" % (i, len_data))\n",
    "\n",
    "        ##### Remove and clean comments\n",
    "        posts = row[1].posts\n",
    "        temp = re.sub('http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', ' ', posts)\n",
    "        temp = re.sub(\"[^a-zA-Z]\", \" \", temp)\n",
    "        temp = re.sub(' +', ' ', temp).lower()\n",
    "        if remove_stop_words:\n",
    "            temp = \" \".join([lemmatiser.lemmatize(w) for w in temp.split(' ') if w not in cachedStopWords])\n",
    "        else:\n",
    "            temp = \" \".join([lemmatiser.lemmatize(w) for w in temp.split(' ')])\n",
    "            \n",
    "        if remove_mbti_profiles:\n",
    "            for t in unique_type_list:\n",
    "                temp = temp.replace(t,\"\")\n",
    "\n",
    "        type_labelized = translate_personality(row[1].type)\n",
    "        list_personality.append(type_labelized)\n",
    "        list_posts.append(temp)\n",
    "\n",
    "    list_posts = np.array(list_posts)\n",
    "    list_personality = np.array(list_personality)\n",
    "    return list_posts, list_personality"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "_cell_guid": "44464e11-d570-4a70-8044-e4631917c89e",
    "_uuid": "501d30b844b84cd6e1fa54545b792183b73b0b51",
    "execution": {
     "iopub.execute_input": "2022-12-07T13:34:41.583574Z",
     "iopub.status.busy": "2022-12-07T13:34:41.583136Z",
     "iopub.status.idle": "2022-12-07T13:35:50.744294Z",
     "shell.execute_reply": "2022-12-07T13:35:50.743390Z",
     "shell.execute_reply.started": "2022-12-07T13:34:41.583529Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 of 8675 rows\n",
      "500 of 8675 rows\n",
      "1000 of 8675 rows\n",
      "1500 of 8675 rows\n",
      "2000 of 8675 rows\n",
      "2500 of 8675 rows\n",
      "3000 of 8675 rows\n",
      "3500 of 8675 rows\n",
      "4000 of 8675 rows\n",
      "4500 of 8675 rows\n",
      "5000 of 8675 rows\n",
      "5500 of 8675 rows\n",
      "6000 of 8675 rows\n",
      "6500 of 8675 rows\n",
      "7000 of 8675 rows\n",
      "7500 of 8675 rows\n",
      "8000 of 8675 rows\n",
      "8500 of 8675 rows\n",
      "8675 of 8675 rows\n"
     ]
    }
   ],
   "source": [
    "list_posts, list_personality  = pre_process_data(data, remove_stop_words=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "_cell_guid": "5028348f-b571-4112-8045-1befb2a22001",
    "_uuid": "efa4ec02751f1fd1258b95050807780a61d0e3a8",
    "execution": {
     "iopub.execute_input": "2022-12-07T13:35:50.746286Z",
     "iopub.status.busy": "2022-12-07T13:35:50.745698Z",
     "iopub.status.idle": "2022-12-07T13:35:50.752349Z",
     "shell.execute_reply": "2022-12-07T13:35:50.751515Z",
     "shell.execute_reply.started": "2022-12-07T13:35:50.746221Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Num posts and personalities:  (8675,) (8675, 4)\n"
     ]
    }
   ],
   "source": [
    "print(\"Num posts and personalities: \",  list_posts.shape, list_personality.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "_cell_guid": "2ecc8222-0c70-43c6-87b6-d488eff5d5f2",
    "_uuid": "4739e84cc06276fa69bdd4f34e160de36d57bcde",
    "execution": {
     "iopub.execute_input": "2022-12-07T13:35:50.754344Z",
     "iopub.status.busy": "2022-12-07T13:35:50.753835Z",
     "iopub.status.idle": "2022-12-07T13:35:50.777374Z",
     "shell.execute_reply": "2022-12-07T13:35:50.776510Z",
     "shell.execute_reply.started": "2022-12-07T13:35:50.754288Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'   moment sportscenter top ten play prank life changing experience life repeat today may perc experience immerse last thing  friend posted facebook committing suicide next day rest peace hello  sorry hear distress natural relationship perfection time every moment existence try figure hard time time growth welcome stuff game set match prozac wellbrutin least thirty minute moving leg mean moving sitting desk chair weed moderation maybe try edible healthier alternative basically come three item determined type whichever type want would likely use given type cognitive function whatnot left thing moderation sims indeed video game good one note good one somewhat subjective completely promoting death given sim dear  favorite video game growing current favorite video game cool appears late sad someone everyone wait thought confidence good thing cherish time solitude b c revel within inner world whereas time workin enjoy time worry people always around yo  lady complimentary personality well hey main social outlet xbox live conversation even verbally fatigue quickly really dig part banned thread requires get high backyard roast eat marshmellows backyard conversing something intellectual followed massage kiss banned many b sentence could think b banned watching movie corner dunce banned health class clearly taught nothing peer pressure banned whole host reason two baby deer left right munching beetle middle using blood two caveman diary today latest happening designated cave diary wall see pokemon world  society everyone becomes optimist artist artist draw idea count forming something like signature welcome robot rank person downed self esteem cuz avid signature artist like proud banned taking room bed ya gotta learn share roach banned much thundering grumbling kind storm yep ahh old high school music heard age failed public speaking class year ago sort learned could better position big part failure overloading like person mentality confirmed  way move denver area start new life '"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list_posts[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "_cell_guid": "4fc7a295-2381-4974-b0bc-6af5a5d7b047",
    "_uuid": "24f2a00a7e5f5fa837093b4d0fdf6dd05f6c61e7",
    "execution": {
     "iopub.execute_input": "2022-12-07T13:35:50.779155Z",
     "iopub.status.busy": "2022-12-07T13:35:50.778670Z",
     "iopub.status.idle": "2022-12-07T13:35:50.793559Z",
     "shell.execute_reply": "2022-12-07T13:35:50.792801Z",
     "shell.execute_reply.started": "2022-12-07T13:35:50.779099Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 0, 0, 0])"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list_personality[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_cell_guid": "c4c7a734-bffc-44dd-81b8-865b7161cd53",
    "_uuid": "2e834d2d4594b7b9e200784033b15b94d02afb54"
   },
   "source": [
    "## 8. Vectorize with count and tf-idf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "_cell_guid": "fe473d3a-9f1d-48b0-8d97-0ff576ad4f10",
    "_uuid": "86f08653912e5643b959751ea17b794e4d3cbcdc",
    "execution": {
     "iopub.execute_input": "2022-12-07T13:35:50.795430Z",
     "iopub.status.busy": "2022-12-07T13:35:50.794820Z",
     "iopub.status.idle": "2022-12-07T13:35:56.171127Z",
     "shell.execute_reply": "2022-12-07T13:35:56.170221Z",
     "shell.execute_reply.started": "2022-12-07T13:35:50.795358Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CountVectorizer...\n",
      "Tf-idf...\n"
     ]
    }
   ],
   "source": [
    "from sklearn.feature_extraction.text import TfidfTransformer\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "from sklearn.manifold import TSNE\n",
    "\n",
    "# Posts to a matrix of token counts\n",
    "cntizer = CountVectorizer(analyzer=\"word\", \n",
    "                             max_features=1500, \n",
    "                             tokenizer=None,    \n",
    "                             preprocessor=None, \n",
    "                             stop_words=None,  \n",
    "                             max_df=0.7,\n",
    "                             min_df=0.1) \n",
    "\n",
    "# Learn the vocabulary dictionary and return term-document matrix\n",
    "print(\"CountVectorizer...\")\n",
    "X_cnt = cntizer.fit_transform(list_posts)\n",
    "\n",
    "# Transform the count matrix to a normalized tf or tf-idf representation\n",
    "tfizer = TfidfTransformer()\n",
    "\n",
    "print(\"Tf-idf...\")\n",
    "# Learn the idf vector (fit) and transform a count matrix to a tf-idf representation\n",
    "X_tfidf =  tfizer.fit_transform(X_cnt).toarray()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "_cell_guid": "cf28feb1-2933-4226-9d5f-dcf81ec29a1f",
    "_uuid": "28d072c06cb9c16e1e1f74215edaf5297a21a050",
    "execution": {
     "iopub.execute_input": "2022-12-07T13:35:56.172877Z",
     "iopub.status.busy": "2022-12-07T13:35:56.172385Z",
     "iopub.status.idle": "2022-12-07T13:35:56.217803Z",
     "shell.execute_reply": "2022-12-07T13:35:56.217047Z",
     "shell.execute_reply.started": "2022-12-07T13:35:56.172792Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(0, 'ability'),\n",
       " (1, 'able'),\n",
       " (2, 'absolutely'),\n",
       " (3, 'accept'),\n",
       " (4, 'accurate'),\n",
       " (5, 'across'),\n",
       " (6, 'act'),\n",
       " (7, 'action'),\n",
       " (8, 'actual'),\n",
       " (9, 'actually'),\n",
       " (10, 'add'),\n",
       " (11, 'admit'),\n",
       " (12, 'advice'),\n",
       " (13, 'afraid'),\n",
       " (14, 'age'),\n",
       " (15, 'ago'),\n",
       " (16, 'agree'),\n",
       " (17, 'ah'),\n",
       " (18, 'almost'),\n",
       " (19, 'alone'),\n",
       " (20, 'along'),\n",
       " (21, 'already'),\n",
       " (22, 'although'),\n",
       " (23, 'amazing'),\n",
       " (24, 'amount'),\n",
       " (25, 'angry'),\n",
       " (26, 'animal'),\n",
       " (27, 'annoying'),\n",
       " (28, 'another'),\n",
       " (29, 'answer'),\n",
       " (30, 'anxiety'),\n",
       " (31, 'anymore'),\n",
       " (32, 'anyone'),\n",
       " (33, 'anything'),\n",
       " (34, 'anyway'),\n",
       " (35, 'apparently'),\n",
       " (36, 'appreciate'),\n",
       " (37, 'approach'),\n",
       " (38, 'area'),\n",
       " (39, 'argument'),\n",
       " (40, 'around'),\n",
       " (41, 'art'),\n",
       " (42, 'ask'),\n",
       " (43, 'asked'),\n",
       " (44, 'asking'),\n",
       " (45, 'aspect'),\n",
       " (46, 'assume'),\n",
       " (47, 'attention'),\n",
       " (48, 'attracted'),\n",
       " (49, 'avatar'),\n",
       " (50, 'avoid'),\n",
       " (51, 'aware'),\n",
       " (52, 'away'),\n",
       " (53, 'awesome'),\n",
       " (54, 'awkward'),\n",
       " (55, 'baby'),\n",
       " (56, 'back'),\n",
       " (57, 'bad'),\n",
       " (58, 'based'),\n",
       " (59, 'basically'),\n",
       " (60, 'beautiful'),\n",
       " (61, 'become'),\n",
       " (62, 'bed'),\n",
       " (63, 'behavior'),\n",
       " (64, 'behind'),\n",
       " (65, 'belief'),\n",
       " (66, 'believe'),\n",
       " (67, 'best'),\n",
       " (68, 'better'),\n",
       " (69, 'big'),\n",
       " (70, 'bit'),\n",
       " (71, 'black'),\n",
       " (72, 'blue'),\n",
       " (73, 'body'),\n",
       " (74, 'book'),\n",
       " (75, 'bored'),\n",
       " (76, 'boring'),\n",
       " (77, 'born'),\n",
       " (78, 'bother'),\n",
       " (79, 'boy'),\n",
       " (80, 'boyfriend'),\n",
       " (81, 'brain'),\n",
       " (82, 'break'),\n",
       " (83, 'bring'),\n",
       " (84, 'brother'),\n",
       " (85, 'buy'),\n",
       " (86, 'call'),\n",
       " (87, 'called'),\n",
       " (88, 'came'),\n",
       " (89, 'cannot'),\n",
       " (90, 'car'),\n",
       " (91, 'care'),\n",
       " (92, 'career'),\n",
       " (93, 'case'),\n",
       " (94, 'cat'),\n",
       " (95, 'cause'),\n",
       " (96, 'certain'),\n",
       " (97, 'certainly'),\n",
       " (98, 'chance'),\n",
       " (99, 'change'),\n",
       " (100, 'changed'),\n",
       " (101, 'character'),\n",
       " (102, 'check'),\n",
       " (103, 'child'),\n",
       " (104, 'choice'),\n",
       " (105, 'choose'),\n",
       " (106, 'class'),\n",
       " (107, 'clear'),\n",
       " (108, 'clearly'),\n",
       " (109, 'close'),\n",
       " (110, 'cognitive'),\n",
       " (111, 'cold'),\n",
       " (112, 'college'),\n",
       " (113, 'color'),\n",
       " (114, 'come'),\n",
       " (115, 'comfortable'),\n",
       " (116, 'coming'),\n",
       " (117, 'comment'),\n",
       " (118, 'common'),\n",
       " (119, 'company'),\n",
       " (120, 'complete'),\n",
       " (121, 'completely'),\n",
       " (122, 'computer'),\n",
       " (123, 'concept'),\n",
       " (124, 'confused'),\n",
       " (125, 'connection'),\n",
       " (126, 'consider'),\n",
       " (127, 'considered'),\n",
       " (128, 'considering'),\n",
       " (129, 'constantly'),\n",
       " (130, 'contact'),\n",
       " (131, 'control'),\n",
       " (132, 'conversation'),\n",
       " (133, 'cool'),\n",
       " (134, 'correct'),\n",
       " (135, 'count'),\n",
       " (136, 'country'),\n",
       " (137, 'couple'),\n",
       " (138, 'course'),\n",
       " (139, 'crazy'),\n",
       " (140, 'create'),\n",
       " (141, 'creative'),\n",
       " (142, 'cry'),\n",
       " (143, 'curious'),\n",
       " (144, 'current'),\n",
       " (145, 'currently'),\n",
       " (146, 'cut'),\n",
       " (147, 'cute'),\n",
       " (148, 'dad'),\n",
       " (149, 'damn'),\n",
       " (150, 'dark'),\n",
       " (151, 'date'),\n",
       " (152, 'dating'),\n",
       " (153, 'day'),\n",
       " (154, 'dead'),\n",
       " (155, 'deal'),\n",
       " (156, 'dear'),\n",
       " (157, 'death'),\n",
       " (158, 'debate'),\n",
       " (159, 'decide'),\n",
       " (160, 'decided'),\n",
       " (161, 'decision'),\n",
       " (162, 'deep'),\n",
       " (163, 'definitely'),\n",
       " (164, 'degree'),\n",
       " (165, 'depends'),\n",
       " (166, 'depressed'),\n",
       " (167, 'depression'),\n",
       " (168, 'describe'),\n",
       " (169, 'description'),\n",
       " (170, 'desire'),\n",
       " (171, 'detail'),\n",
       " (172, 'die'),\n",
       " (173, 'difference'),\n",
       " (174, 'different'),\n",
       " (175, 'difficult'),\n",
       " (176, 'discussion'),\n",
       " (177, 'dislike'),\n",
       " (178, 'dog'),\n",
       " (179, 'dominant'),\n",
       " (180, 'done'),\n",
       " (181, 'dont'),\n",
       " (182, 'doubt'),\n",
       " (183, 'dream'),\n",
       " (184, 'drink'),\n",
       " (185, 'drive'),\n",
       " (186, 'due'),\n",
       " (187, 'early'),\n",
       " (188, 'easier'),\n",
       " (189, 'easily'),\n",
       " (190, 'easy'),\n",
       " (191, 'eat'),\n",
       " (192, 'edit'),\n",
       " (193, 'effect'),\n",
       " (194, 'effort'),\n",
       " (195, 'either'),\n",
       " (196, 'else'),\n",
       " (197, 'emotion'),\n",
       " (198, 'emotional'),\n",
       " (199, 'emotionally'),\n",
       " (200, 'end'),\n",
       " (201, 'ended'),\n",
       " (202, 'energy'),\n",
       " (203, 'english'),\n",
       " (204, 'enjoy'),\n",
       " (205, 'enneagram'),\n",
       " (206, 'enough'),\n",
       " (207, 'entire'),\n",
       " (208, 'environment'),\n",
       " (209, 'especially'),\n",
       " (210, 'etc'),\n",
       " (211, 'ever'),\n",
       " (212, 'every'),\n",
       " (213, 'everyone'),\n",
       " (214, 'everything'),\n",
       " (215, 'evil'),\n",
       " (216, 'ex'),\n",
       " (217, 'exact'),\n",
       " (218, 'exactly'),\n",
       " (219, 'example'),\n",
       " (220, 'except'),\n",
       " (221, 'exist'),\n",
       " (222, 'expect'),\n",
       " (223, 'experience'),\n",
       " (224, 'explain'),\n",
       " (225, 'express'),\n",
       " (226, 'extremely'),\n",
       " (227, 'extrovert'),\n",
       " (228, 'extroverted'),\n",
       " (229, 'eye'),\n",
       " (230, 'face'),\n",
       " (231, 'fact'),\n",
       " (232, 'fair'),\n",
       " (233, 'fairly'),\n",
       " (234, 'fall'),\n",
       " (235, 'family'),\n",
       " (236, 'fan'),\n",
       " (237, 'far'),\n",
       " (238, 'fast'),\n",
       " (239, 'father'),\n",
       " (240, 'favorite'),\n",
       " (241, 'fe'),\n",
       " (242, 'fear'),\n",
       " (243, 'feeling'),\n",
       " (244, 'fellow'),\n",
       " (245, 'felt'),\n",
       " (246, 'female'),\n",
       " (247, 'fi'),\n",
       " (248, 'fight'),\n",
       " (249, 'figure'),\n",
       " (250, 'finally'),\n",
       " (251, 'finding'),\n",
       " (252, 'fine'),\n",
       " (253, 'fit'),\n",
       " (254, 'focus'),\n",
       " (255, 'follow'),\n",
       " (256, 'food'),\n",
       " (257, 'forget'),\n",
       " (258, 'form'),\n",
       " (259, 'forum'),\n",
       " (260, 'found'),\n",
       " (261, 'four'),\n",
       " (262, 'free'),\n",
       " (263, 'friendship'),\n",
       " (264, 'front'),\n",
       " (265, 'fuck'),\n",
       " (266, 'full'),\n",
       " (267, 'fun'),\n",
       " (268, 'function'),\n",
       " (269, 'funny'),\n",
       " (270, 'future'),\n",
       " (271, 'game'),\n",
       " (272, 'gave'),\n",
       " (273, 'general'),\n",
       " (274, 'generally'),\n",
       " (275, 'getting'),\n",
       " (276, 'girl'),\n",
       " (277, 'give'),\n",
       " (278, 'given'),\n",
       " (279, 'giving'),\n",
       " (280, 'glad'),\n",
       " (281, 'goal'),\n",
       " (282, 'god'),\n",
       " (283, 'gone'),\n",
       " (284, 'gonna'),\n",
       " (285, 'got'),\n",
       " (286, 'gotten'),\n",
       " (287, 'grade'),\n",
       " (288, 'great'),\n",
       " (289, 'group'),\n",
       " (290, 'guess'),\n",
       " (291, 'guy'),\n",
       " (292, 'haha'),\n",
       " (293, 'hair'),\n",
       " (294, 'half'),\n",
       " (295, 'hand'),\n",
       " (296, 'hang'),\n",
       " (297, 'happen'),\n",
       " (298, 'happened'),\n",
       " (299, 'happens'),\n",
       " (300, 'happy'),\n",
       " (301, 'hard'),\n",
       " (302, 'hate'),\n",
       " (303, 'head'),\n",
       " (304, 'healthy'),\n",
       " (305, 'hear'),\n",
       " (306, 'heard'),\n",
       " (307, 'heart'),\n",
       " (308, 'hell'),\n",
       " (309, 'hello'),\n",
       " (310, 'help'),\n",
       " (311, 'helped'),\n",
       " (312, 'helpful'),\n",
       " (313, 'hey'),\n",
       " (314, 'hi'),\n",
       " (315, 'high'),\n",
       " (316, 'highly'),\n",
       " (317, 'history'),\n",
       " (318, 'hit'),\n",
       " (319, 'hmm'),\n",
       " (320, 'hold'),\n",
       " (321, 'home'),\n",
       " (322, 'honest'),\n",
       " (323, 'honestly'),\n",
       " (324, 'hope'),\n",
       " (325, 'hot'),\n",
       " (326, 'hour'),\n",
       " (327, 'house'),\n",
       " (328, 'however'),\n",
       " (329, 'hug'),\n",
       " (330, 'huge'),\n",
       " (331, 'human'),\n",
       " (332, 'humor'),\n",
       " (333, 'hurt'),\n",
       " (334, 'idea'),\n",
       " (335, 'ideal'),\n",
       " (336, 'im'),\n",
       " (337, 'image'),\n",
       " (338, 'imagine'),\n",
       " (339, 'important'),\n",
       " (340, 'individual'),\n",
       " (341, 'information'),\n",
       " (342, 'inside'),\n",
       " (343, 'instead'),\n",
       " (344, 'intelligence'),\n",
       " (345, 'intelligent'),\n",
       " (346, 'interaction'),\n",
       " (347, 'interest'),\n",
       " (348, 'interested'),\n",
       " (349, 'interesting'),\n",
       " (350, 'internet'),\n",
       " (351, 'introvert'),\n",
       " (352, 'introverted'),\n",
       " (353, 'intuition'),\n",
       " (354, 'intuitive'),\n",
       " (355, 'involved'),\n",
       " (356, 'issue'),\n",
       " (357, 'job'),\n",
       " (358, 'joke'),\n",
       " (359, 'keep'),\n",
       " (360, 'kid'),\n",
       " (361, 'kill'),\n",
       " (362, 'kind'),\n",
       " (363, 'kinda'),\n",
       " (364, 'knew'),\n",
       " (365, 'knowing'),\n",
       " (366, 'knowledge'),\n",
       " (367, 'known'),\n",
       " (368, 'lack'),\n",
       " (369, 'language'),\n",
       " (370, 'large'),\n",
       " (371, 'last'),\n",
       " (372, 'late'),\n",
       " (373, 'lately'),\n",
       " (374, 'later'),\n",
       " (375, 'laugh'),\n",
       " (376, 'laughing'),\n",
       " (377, 'lazy'),\n",
       " (378, 'le'),\n",
       " (379, 'lead'),\n",
       " (380, 'learn'),\n",
       " (381, 'learned'),\n",
       " (382, 'learning'),\n",
       " (383, 'least'),\n",
       " (384, 'leave'),\n",
       " (385, 'left'),\n",
       " (386, 'let'),\n",
       " (387, 'level'),\n",
       " (388, 'lie'),\n",
       " (389, 'light'),\n",
       " (390, 'liked'),\n",
       " (391, 'likely'),\n",
       " (392, 'line'),\n",
       " (393, 'link'),\n",
       " (394, 'list'),\n",
       " (395, 'listen'),\n",
       " (396, 'listening'),\n",
       " (397, 'literally'),\n",
       " (398, 'little'),\n",
       " (399, 'live'),\n",
       " (400, 'living'),\n",
       " (401, 'logic'),\n",
       " (402, 'logical'),\n",
       " (403, 'lol'),\n",
       " (404, 'long'),\n",
       " (405, 'longer'),\n",
       " (406, 'look'),\n",
       " (407, 'looked'),\n",
       " (408, 'looking'),\n",
       " (409, 'lose'),\n",
       " (410, 'lost'),\n",
       " (411, 'loud'),\n",
       " (412, 'loved'),\n",
       " (413, 'low'),\n",
       " (414, 'made'),\n",
       " (415, 'main'),\n",
       " (416, 'major'),\n",
       " (417, 'making'),\n",
       " (418, 'male'),\n",
       " (419, 'man'),\n",
       " (420, 'many'),\n",
       " (421, 'math'),\n",
       " (422, 'matter'),\n",
       " (423, 'may'),\n",
       " (424, 'maybe'),\n",
       " (425, 'mbti'),\n",
       " (426, 'mean'),\n",
       " (427, 'meaning'),\n",
       " (428, 'meant'),\n",
       " (429, 'meet'),\n",
       " (430, 'member'),\n",
       " (431, 'memory'),\n",
       " (432, 'men'),\n",
       " (433, 'mental'),\n",
       " (434, 'mention'),\n",
       " (435, 'mentioned'),\n",
       " (436, 'message'),\n",
       " (437, 'met'),\n",
       " (438, 'middle'),\n",
       " (439, 'might'),\n",
       " (440, 'mind'),\n",
       " (441, 'mine'),\n",
       " (442, 'minute'),\n",
       " (443, 'miss'),\n",
       " (444, 'mistake'),\n",
       " (445, 'mom'),\n",
       " (446, 'moment'),\n",
       " (447, 'money'),\n",
       " (448, 'month'),\n",
       " (449, 'mood'),\n",
       " (450, 'morning'),\n",
       " (451, 'mostly'),\n",
       " (452, 'mother'),\n",
       " (453, 'move'),\n",
       " (454, 'movie'),\n",
       " (455, 'music'),\n",
       " (456, 'must'),\n",
       " (457, 'name'),\n",
       " (458, 'natural'),\n",
       " (459, 'naturally'),\n",
       " (460, 'nature'),\n",
       " (461, 'ne'),\n",
       " (462, 'necessarily'),\n",
       " (463, 'needed'),\n",
       " (464, 'negative'),\n",
       " (465, 'new'),\n",
       " (466, 'next'),\n",
       " (467, 'ni'),\n",
       " (468, 'nice'),\n",
       " (469, 'night'),\n",
       " (470, 'non'),\n",
       " (471, 'none'),\n",
       " (472, 'normal'),\n",
       " (473, 'note'),\n",
       " (474, 'nothing'),\n",
       " (475, 'notice'),\n",
       " (476, 'noticed'),\n",
       " (477, 'nt'),\n",
       " (478, 'number'),\n",
       " (479, 'obvious'),\n",
       " (480, 'obviously'),\n",
       " (481, 'often'),\n",
       " (482, 'oh'),\n",
       " (483, 'ok'),\n",
       " (484, 'okay'),\n",
       " (485, 'old'),\n",
       " (486, 'older'),\n",
       " (487, 'online'),\n",
       " (488, 'op'),\n",
       " (489, 'open'),\n",
       " (490, 'opinion'),\n",
       " (491, 'opposite'),\n",
       " (492, 'option'),\n",
       " (493, 'order'),\n",
       " (494, 'original'),\n",
       " (495, 'others'),\n",
       " (496, 'otherwise'),\n",
       " (497, 'outside'),\n",
       " (498, 'page'),\n",
       " (499, 'pain'),\n",
       " (500, 'parent'),\n",
       " (501, 'part'),\n",
       " (502, 'particular'),\n",
       " (503, 'particularly'),\n",
       " (504, 'partner'),\n",
       " (505, 'party'),\n",
       " (506, 'past'),\n",
       " (507, 'pay'),\n",
       " (508, 'perc'),\n",
       " (509, 'perfect'),\n",
       " (510, 'perhaps'),\n",
       " (511, 'period'),\n",
       " (512, 'personal'),\n",
       " (513, 'personality'),\n",
       " (514, 'personally'),\n",
       " (515, 'perspective'),\n",
       " (516, 'phone'),\n",
       " (517, 'physical'),\n",
       " (518, 'pick'),\n",
       " (519, 'picture'),\n",
       " (520, 'piece'),\n",
       " (521, 'place'),\n",
       " (522, 'plan'),\n",
       " (523, 'play'),\n",
       " (524, 'playing'),\n",
       " (525, 'please'),\n",
       " (526, 'plus'),\n",
       " (527, 'point'),\n",
       " (528, 'positive'),\n",
       " (529, 'possibility'),\n",
       " (530, 'possible'),\n",
       " (531, 'possibly'),\n",
       " (532, 'post'),\n",
       " (533, 'posted'),\n",
       " (534, 'posting'),\n",
       " (535, 'power'),\n",
       " (536, 'prefer'),\n",
       " (537, 'present'),\n",
       " (538, 'pretty'),\n",
       " (539, 'probably'),\n",
       " (540, 'problem'),\n",
       " (541, 'process'),\n",
       " (542, 'project'),\n",
       " (543, 'proud'),\n",
       " (544, 'public'),\n",
       " (545, 'purpose'),\n",
       " (546, 'put'),\n",
       " (547, 'putting'),\n",
       " (548, 'quality'),\n",
       " (549, 'question'),\n",
       " (550, 'quickly'),\n",
       " (551, 'quiet'),\n",
       " (552, 'quite'),\n",
       " (553, 'quote'),\n",
       " (554, 'random'),\n",
       " (555, 'rare'),\n",
       " (556, 'rarely'),\n",
       " (557, 'rather'),\n",
       " (558, 'read'),\n",
       " (559, 'reading'),\n",
       " (560, 'real'),\n",
       " (561, 'reality'),\n",
       " (562, 'realize'),\n",
       " (563, 'realized'),\n",
       " (564, 'reason'),\n",
       " (565, 'recently'),\n",
       " (566, 'red'),\n",
       " (567, 'relate'),\n",
       " (568, 'related'),\n",
       " (569, 'relationship'),\n",
       " (570, 'religion'),\n",
       " (571, 'remember'),\n",
       " (572, 'reply'),\n",
       " (573, 'research'),\n",
       " (574, 'respect'),\n",
       " (575, 'response'),\n",
       " (576, 'rest'),\n",
       " (577, 'result'),\n",
       " (578, 'romantic'),\n",
       " (579, 'room'),\n",
       " (580, 'rule'),\n",
       " (581, 'run'),\n",
       " (582, 'sad'),\n",
       " (583, 'said'),\n",
       " (584, 'saw'),\n",
       " (585, 'saying'),\n",
       " (586, 'school'),\n",
       " (587, 'science'),\n",
       " (588, 'se'),\n",
       " (589, 'second'),\n",
       " (590, 'seeing'),\n",
       " (591, 'seem'),\n",
       " (592, 'seemed'),\n",
       " (593, 'seems'),\n",
       " (594, 'seen'),\n",
       " (595, 'self'),\n",
       " (596, 'sense'),\n",
       " (597, 'sensitive'),\n",
       " (598, 'series'),\n",
       " (599, 'serious'),\n",
       " (600, 'seriously'),\n",
       " (601, 'set'),\n",
       " (602, 'several'),\n",
       " (603, 'sex'),\n",
       " (604, 'share'),\n",
       " (605, 'shit'),\n",
       " (606, 'short'),\n",
       " (607, 'show'),\n",
       " (608, 'shy'),\n",
       " (609, 'si'),\n",
       " (610, 'side'),\n",
       " (611, 'sign'),\n",
       " (612, 'similar'),\n",
       " (613, 'simple'),\n",
       " (614, 'simply'),\n",
       " (615, 'since'),\n",
       " (616, 'single'),\n",
       " (617, 'sister'),\n",
       " (618, 'sit'),\n",
       " (619, 'site'),\n",
       " (620, 'situation'),\n",
       " (621, 'skill'),\n",
       " (622, 'sleep'),\n",
       " (623, 'small'),\n",
       " (624, 'smart'),\n",
       " (625, 'smile'),\n",
       " (626, 'social'),\n",
       " (627, 'society'),\n",
       " (628, 'somehow'),\n",
       " (629, 'sometimes'),\n",
       " (630, 'somewhat'),\n",
       " (631, 'somewhere'),\n",
       " (632, 'song'),\n",
       " (633, 'soon'),\n",
       " (634, 'sorry'),\n",
       " (635, 'sort'),\n",
       " (636, 'soul'),\n",
       " (637, 'sound'),\n",
       " (638, 'space'),\n",
       " (639, 'speak'),\n",
       " (640, 'speaking'),\n",
       " (641, 'special'),\n",
       " (642, 'specific'),\n",
       " (643, 'spend'),\n",
       " (644, 'spent'),\n",
       " (645, 'stand'),\n",
       " (646, 'start'),\n",
       " (647, 'started'),\n",
       " (648, 'starting'),\n",
       " (649, 'state'),\n",
       " (650, 'statement'),\n",
       " (651, 'stay'),\n",
       " (652, 'step'),\n",
       " (653, 'stereotype'),\n",
       " (654, 'stick'),\n",
       " (655, 'still'),\n",
       " (656, 'stop'),\n",
       " (657, 'story'),\n",
       " (658, 'straight'),\n",
       " (659, 'strange'),\n",
       " (660, 'stress'),\n",
       " (661, 'strong'),\n",
       " (662, 'stuck'),\n",
       " (663, 'student'),\n",
       " (664, 'study'),\n",
       " (665, 'stuff'),\n",
       " (666, 'stupid'),\n",
       " (667, 'style'),\n",
       " (668, 'subject'),\n",
       " (669, 'suck'),\n",
       " (670, 'super'),\n",
       " (671, 'support'),\n",
       " (672, 'suppose'),\n",
       " (673, 'supposed'),\n",
       " (674, 'sure'),\n",
       " (675, 'surprised'),\n",
       " (676, 'sweet'),\n",
       " (677, 'system'),\n",
       " (678, 'take'),\n",
       " (679, 'taken'),\n",
       " (680, 'taking'),\n",
       " (681, 'talk'),\n",
       " (682, 'talking'),\n",
       " (683, 'te'),\n",
       " (684, 'teacher'),\n",
       " (685, 'tell'),\n",
       " (686, 'telling'),\n",
       " (687, 'tend'),\n",
       " (688, 'tendency'),\n",
       " (689, 'term'),\n",
       " (690, 'terrible'),\n",
       " (691, 'test'),\n",
       " (692, 'text'),\n",
       " (693, 'th'),\n",
       " (694, 'thank'),\n",
       " (695, 'thanks'),\n",
       " (696, 'theory'),\n",
       " (697, 'thinking'),\n",
       " (698, 'thread'),\n",
       " (699, 'three'),\n",
       " (700, 'ti'),\n",
       " (701, 'tired'),\n",
       " (702, 'title'),\n",
       " (703, 'today'),\n",
       " (704, 'together'),\n",
       " (705, 'told'),\n",
       " (706, 'tongue'),\n",
       " (707, 'took'),\n",
       " (708, 'top'),\n",
       " (709, 'topic'),\n",
       " (710, 'totally'),\n",
       " (711, 'touch'),\n",
       " (712, 'towards'),\n",
       " (713, 'trait'),\n",
       " (714, 'tried'),\n",
       " (715, 'trouble'),\n",
       " (716, 'true'),\n",
       " (717, 'truly'),\n",
       " (718, 'trust'),\n",
       " (719, 'truth'),\n",
       " (720, 'try'),\n",
       " (721, 'trying'),\n",
       " (722, 'turn'),\n",
       " (723, 'tv'),\n",
       " (724, 'two'),\n",
       " (725, 'typing'),\n",
       " (726, 'understand'),\n",
       " (727, 'understanding'),\n",
       " (728, 'unfortunately'),\n",
       " (729, 'unhealthy'),\n",
       " (730, 'unless'),\n",
       " (731, 'unsure'),\n",
       " (732, 'upon'),\n",
       " (733, 'use'),\n",
       " (734, 'used'),\n",
       " (735, 'useful'),\n",
       " (736, 'user'),\n",
       " (737, 'using'),\n",
       " (738, 'usually'),\n",
       " (739, 'value'),\n",
       " (740, 'video'),\n",
       " (741, 'view'),\n",
       " (742, 'voice'),\n",
       " (743, 'wait'),\n",
       " (744, 'walk'),\n",
       " (745, 'wanted'),\n",
       " (746, 'wanting'),\n",
       " (747, 'watch'),\n",
       " (748, 'watched'),\n",
       " (749, 'watching'),\n",
       " (750, 'water'),\n",
       " (751, 'wear'),\n",
       " (752, 'week'),\n",
       " (753, 'weird'),\n",
       " (754, 'welcome'),\n",
       " (755, 'went'),\n",
       " (756, 'whatever'),\n",
       " (757, 'whenever'),\n",
       " (758, 'whether'),\n",
       " (759, 'white'),\n",
       " (760, 'whole'),\n",
       " (761, 'wink'),\n",
       " (762, 'wish'),\n",
       " (763, 'within'),\n",
       " (764, 'without'),\n",
       " (765, 'woman'),\n",
       " (766, 'wonder'),\n",
       " (767, 'wondering'),\n",
       " (768, 'word'),\n",
       " (769, 'work'),\n",
       " (770, 'worked'),\n",
       " (771, 'working'),\n",
       " (772, 'world'),\n",
       " (773, 'worry'),\n",
       " (774, 'worse'),\n",
       " (775, 'worst'),\n",
       " (776, 'worth'),\n",
       " (777, 'wow'),\n",
       " (778, 'write'),\n",
       " (779, 'writing'),\n",
       " (780, 'written'),\n",
       " (781, 'wrong'),\n",
       " (782, 'wrote'),\n",
       " (783, 'xd'),\n",
       " (784, 'yeah'),\n",
       " (785, 'year'),\n",
       " (786, 'yes'),\n",
       " (787, 'yesterday'),\n",
       " (788, 'yet'),\n",
       " (789, 'young'),\n",
       " (790, 'younger')]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "feature_names = list(enumerate(cntizer.get_feature_names()))\n",
    "feature_names"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "_cell_guid": "789c0833-d2fe-4427-a05d-a5bb83d9239b",
    "_uuid": "7d0c4c1f0d3c6ed93a29a30a34428888f108653d",
    "execution": {
     "iopub.execute_input": "2022-12-07T13:35:56.219261Z",
     "iopub.status.busy": "2022-12-07T13:35:56.218838Z",
     "iopub.status.idle": "2022-12-07T13:35:56.224072Z",
     "shell.execute_reply": "2022-12-07T13:35:56.223288Z",
     "shell.execute_reply.started": "2022-12-07T13:35:56.219215Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(8675, 791)"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_tfidf.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_cell_guid": "cbc14fa8-056e-4892-abb9-3adfe7062d8e",
    "_uuid": "d3573b9179fcad6e2efdde9663c983e4972cf613"
   },
   "source": [
    "## 9. X / Y data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "_cell_guid": "29a1d526-613b-4435-97ae-d268938cc157",
    "_uuid": "f4f1ac0959bb779f16eec050cc4c9559d6ac4c0e",
    "execution": {
     "iopub.execute_input": "2022-12-07T13:35:56.225534Z",
     "iopub.status.busy": "2022-12-07T13:35:56.225146Z",
     "iopub.status.idle": "2022-12-07T13:35:56.254497Z",
     "shell.execute_reply": "2022-12-07T13:35:56.253140Z",
     "shell.execute_reply.started": "2022-12-07T13:35:56.225492Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X: Posts in tf-idf representation \n",
      "* 1st row:\n",
      "[ 0.          0.          0.          0.          0.          0.          0.\n",
      "  0.          0.          0.          0.          0.          0.          0.\n",
      "  0.08042209  0.06830218  0.          0.          0.          0.          0.\n",
      "  0.          0.          0.          0.          0.          0.          0.\n",
      "  0.          0.          0.          0.          0.          0.          0.\n",
      "  0.          0.          0.          0.10331537  0.          0.04973404\n",
      "  0.          0.          0.          0.          0.          0.          0.\n",
      "  0.          0.          0.          0.          0.          0.          0.\n",
      "  0.10984584  0.          0.          0.          0.08642509  0.          0.\n",
      "  0.10488948  0.          0.          0.          0.          0.\n",
      "  0.05188886  0.06824736  0.          0.          0.          0.          0.\n",
      "  0.          0.          0.          0.          0.          0.          0.\n",
      "  0.          0.          0.          0.          0.          0.          0.\n",
      "  0.          0.          0.          0.          0.          0.          0.\n",
      "  0.          0.          0.          0.          0.          0.          0.\n",
      "  0.          0.          0.          0.16397917  0.          0.10688913\n",
      "  0.          0.09877559  0.          0.          0.          0.04608261\n",
      "  0.          0.          0.          0.          0.          0.          0.0719267\n",
      "  0.          0.          0.          0.          0.          0.          0.\n",
      "  0.          0.          0.          0.07283191  0.07407407  0.\n",
      "  0.10568848  0.          0.          0.          0.          0.          0.\n",
      "  0.          0.          0.1056548   0.          0.          0.          0.\n",
      "  0.          0.          0.          0.          0.04782271  0.          0.\n",
      "  0.09941139  0.09451469  0.          0.          0.          0.          0.\n",
      "  0.          0.          0.          0.          0.          0.          0.\n",
      "  0.          0.          0.          0.          0.          0.          0.\n",
      "  0.          0.          0.          0.          0.          0.          0.\n",
      "  0.          0.          0.          0.          0.          0.          0.\n",
      "  0.09534415  0.          0.          0.          0.          0.          0.\n",
      "  0.          0.          0.          0.          0.          0.\n",
      "  0.06872176  0.          0.          0.          0.          0.          0.\n",
      "  0.          0.05582718  0.11108332  0.          0.          0.          0.\n",
      "  0.          0.          0.          0.          0.          0.12014107\n",
      "  0.          0.          0.          0.          0.          0.          0.\n",
      "  0.          0.          0.          0.          0.          0.          0.\n",
      "  0.          0.          0.15686138  0.          0.          0.          0.\n",
      "  0.          0.          0.          0.          0.08315126  0.          0.\n",
      "  0.          0.          0.          0.          0.          0.          0.\n",
      "  0.          0.          0.          0.          0.          0.          0.\n",
      "  0.          0.          0.06994393  0.          0.          0.28967862\n",
      "  0.          0.          0.          0.          0.          0.\n",
      "  0.18269044  0.          0.          0.          0.          0.          0.\n",
      "  0.          0.          0.          0.          0.          0.          0.\n",
      "  0.          0.          0.          0.          0.          0.          0.\n",
      "  0.          0.          0.0547579   0.          0.          0.\n",
      "  0.07784114  0.08260747  0.          0.          0.09099651  0.          0.\n",
      "  0.          0.07935032  0.          0.12951228  0.          0.          0.\n",
      "  0.          0.          0.          0.          0.          0.          0.\n",
      "  0.          0.          0.          0.          0.          0.          0.\n",
      "  0.          0.05337654  0.          0.          0.          0.          0.\n",
      "  0.          0.          0.          0.          0.          0.          0.\n",
      "  0.          0.          0.          0.          0.          0.          0.\n",
      "  0.          0.          0.          0.          0.          0.          0.\n",
      "  0.          0.05266898  0.          0.          0.          0.          0.\n",
      "  0.          0.          0.          0.05836642  0.0940125   0.          0.\n",
      "  0.          0.          0.          0.          0.          0.07856479\n",
      "  0.09349439  0.          0.06118606  0.          0.16913746  0.          0.\n",
      "  0.          0.          0.          0.0799363   0.          0.          0.\n",
      "  0.          0.          0.          0.          0.0665288   0.          0.\n",
      "  0.          0.          0.          0.          0.          0.          0.\n",
      "  0.          0.          0.          0.          0.          0.\n",
      "  0.09894029  0.          0.          0.          0.          0.04935906\n",
      "  0.          0.          0.0575142   0.05105458  0.          0.04654201\n",
      "  0.          0.          0.          0.          0.          0.          0.\n",
      "  0.          0.          0.          0.          0.09842152  0.          0.\n",
      "  0.          0.09398877  0.          0.          0.          0.14959903\n",
      "  0.          0.          0.          0.          0.          0.\n",
      "  0.08740328  0.07536433  0.06984036  0.          0.          0.09969166\n",
      "  0.          0.          0.          0.          0.          0.\n",
      "  0.05621427  0.07981208  0.          0.          0.          0.          0.\n",
      "  0.          0.09683441  0.06174913  0.          0.          0.          0.\n",
      "  0.          0.          0.          0.          0.          0.\n",
      "  0.06720138  0.          0.          0.          0.          0.          0.\n",
      "  0.          0.          0.          0.          0.          0.          0.\n",
      "  0.          0.          0.1144908   0.          0.          0.          0.\n",
      "  0.          0.          0.10502133  0.          0.          0.          0.\n",
      "  0.05920758  0.          0.          0.          0.          0.          0.\n",
      "  0.          0.          0.          0.07229573  0.          0.          0.\n",
      "  0.          0.          0.          0.          0.          0.\n",
      "  0.08910025  0.          0.          0.          0.          0.          0.\n",
      "  0.          0.          0.          0.09769795  0.10578971  0.          0.\n",
      "  0.          0.          0.          0.10692408  0.          0.          0.\n",
      "  0.          0.          0.          0.          0.          0.          0.\n",
      "  0.          0.          0.          0.056854    0.          0.          0.\n",
      "  0.          0.05655187  0.          0.          0.          0.          0.\n",
      "  0.          0.0967055   0.          0.          0.0884512   0.          0.\n",
      "  0.08325421  0.          0.          0.          0.0608422   0.          0.\n",
      "  0.          0.          0.          0.          0.          0.\n",
      "  0.06417914  0.          0.          0.          0.          0.\n",
      "  0.09239118  0.          0.          0.08242257  0.          0.          0.\n",
      "  0.          0.          0.          0.          0.          0.          0.\n",
      "  0.          0.          0.          0.          0.          0.          0.\n",
      "  0.          0.          0.          0.          0.06822546  0.09769795\n",
      "  0.          0.          0.10175234  0.          0.          0.\n",
      "  0.06439313  0.07327479  0.          0.          0.          0.\n",
      "  0.09874822  0.          0.          0.          0.          0.\n",
      "  0.06190271  0.          0.          0.          0.          0.          0.\n",
      "  0.          0.          0.          0.          0.          0.          0.\n",
      "  0.          0.          0.          0.          0.          0.06592056\n",
      "  0.          0.          0.          0.          0.          0.          0.\n",
      "  0.          0.          0.          0.          0.          0.          0.\n",
      "  0.07897035  0.          0.          0.          0.          0.          0.\n",
      "  0.          0.          0.          0.          0.          0.          0.\n",
      "  0.          0.          0.          0.          0.05092406  0.087854    0.\n",
      "  0.          0.          0.1494126   0.          0.          0.          0.\n",
      "  0.09340105  0.          0.          0.          0.          0.          0.\n",
      "  0.          0.          0.          0.          0.          0.09835864\n",
      "  0.          0.          0.          0.10555797  0.          0.          0.\n",
      "  0.          0.          0.          0.          0.          0.05765739\n",
      "  0.          0.          0.          0.08289525  0.          0.          0.2344923\n",
      "  0.          0.          0.08972042  0.          0.          0.          0.\n",
      "  0.          0.08588141  0.          0.          0.          0.\n",
      "  0.16034096  0.          0.          0.          0.          0.\n",
      "  0.07001317  0.          0.          0.10127672  0.          0.          0.\n",
      "  0.          0.          0.          0.          0.          0.10829927\n",
      "  0.09326152  0.          0.          0.          0.          0.          0.\n",
      "  0.          0.          0.          0.          0.          0.04577982\n",
      "  0.          0.          0.          0.          0.        ]\n"
     ]
    }
   ],
   "source": [
    "print(\"X: Posts in tf-idf representation \\n* 1st row:\\n%s\" % X_tfidf[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "_cell_guid": "0833bf69-8f6c-4daf-915b-32b7402262f8",
    "_uuid": "c8d7a87e8c469b24f53ce471196aef5dfe07a792",
    "execution": {
     "iopub.execute_input": "2022-12-07T13:35:56.256653Z",
     "iopub.status.busy": "2022-12-07T13:35:56.256031Z",
     "iopub.status.idle": "2022-12-07T13:35:56.264807Z",
     "shell.execute_reply": "2022-12-07T13:35:56.263964Z",
     "shell.execute_reply.started": "2022-12-07T13:35:56.256564Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "IE: Introversion (I) / Extroversion (E)\n",
      "NS: Intuition (N) – Sensing (S)\n",
      "FT: Feeling (F) - Thinking (T)\n",
      "JP: Judging (J) – Perceiving (P)\n"
     ]
    }
   ],
   "source": [
    "type_indicators = [ \"IE: Introversion (I) / Extroversion (E)\", \"NS: Intuition (N) – Sensing (S)\", \n",
    "                   \"FT: Feeling (F) - Thinking (T)\", \"JP: Judging (J) – Perceiving (P)\"  ]\n",
    "\n",
    "for l in range(len(type_indicators)):\n",
    "    print(type_indicators[l])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "_cell_guid": "fa3c1056-06ae-4e75-ba98-b0456ca4b4c0",
    "_uuid": "19586851e36b2606ea650ef657bd77dd114aa2a2",
    "execution": {
     "iopub.execute_input": "2022-12-07T13:35:56.266527Z",
     "iopub.status.busy": "2022-12-07T13:35:56.265936Z",
     "iopub.status.idle": "2022-12-07T13:35:56.279997Z",
     "shell.execute_reply": "2022-12-07T13:35:56.279085Z",
     "shell.execute_reply.started": "2022-12-07T13:35:56.266478Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MBTI 1st row: INFJ\n",
      "Y: Binarized MBTI 1st row: [0 0 0 0]\n"
     ]
    }
   ],
   "source": [
    "print(\"MBTI 1st row: %s\" % translate_back(list_personality[0,:]))\n",
    "print(\"Y: Binarized MBTI 1st row: %s\" % list_personality[0,:])\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_cell_guid": "1ed7e296-7741-457c-89d6-091f7de0cb93",
    "_uuid": "7d5d28276fbe18fe0eb02af1d00ebfddec43bb29"
   },
   "source": [
    "## 10. First XGBoost model for MBTI dataset\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "_cell_guid": "dbbed077-130a-4860-b0bd-80f328611bd4",
    "_uuid": "76dd80d8b1ab630afde0a0a86b3fac5aa6c2c366",
    "execution": {
     "iopub.execute_input": "2022-12-07T13:35:56.281971Z",
     "iopub.status.busy": "2022-12-07T13:35:56.281410Z",
     "iopub.status.idle": "2022-12-07T13:37:01.973385Z",
     "shell.execute_reply": "2022-12-07T13:37:01.972081Z",
     "shell.execute_reply.started": "2022-12-07T13:35:56.281904Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "IE: Introversion (I) / Extroversion (E) ...\n",
      "* IE: Introversion (I) / Extroversion (E) Accuracy: 78.17%\n",
      "NS: Intuition (N) – Sensing (S) ...\n",
      "* NS: Intuition (N) – Sensing (S) Accuracy: 86.06%\n",
      "FT: Feeling (F) - Thinking (T) ...\n",
      "* FT: Feeling (F) - Thinking (T) Accuracy: 71.78%\n",
      "JP: Judging (J) – Perceiving (P) ...\n",
      "* JP: Judging (J) – Perceiving (P) Accuracy: 65.70%\n"
     ]
    }
   ],
   "source": [
    "# First XGBoost model for MBTI dataset\n",
    "from numpy import loadtxt\n",
    "from xgboost import XGBClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "# Posts in tf-idf representation\n",
    "X = X_tfidf\n",
    "\n",
    "# Let's train type indicator individually\n",
    "for l in range(len(type_indicators)):\n",
    "    print(\"%s ...\" % (type_indicators[l]))\n",
    "    \n",
    "    # Let's train type indicator individually\n",
    "    Y = list_personality[:,l]\n",
    "\n",
    "    # split data into train and test sets\n",
    "    seed = 7\n",
    "    test_size = 0.33\n",
    "    X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=test_size, random_state=seed)\n",
    "\n",
    "    # fit model on training data\n",
    "    model = XGBClassifier()\n",
    "    model.fit(X_train, y_train)\n",
    "\n",
    "    # make predictions for test data\n",
    "    y_pred = model.predict(X_test)\n",
    "    predictions = [round(value) for value in y_pred]\n",
    "    # evaluate predictions\n",
    "    accuracy = accuracy_score(y_test, predictions)\n",
    "    print(\"* %s Accuracy: %.2f%%\" % (type_indicators[l], accuracy * 100.0))\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_cell_guid": "ff11f94b-a58a-4e6f-a106-7c7dc4065e79",
    "_uuid": "ac88eefd05911a98c832e78cbfcbc984b2a4fe8b"
   },
   "source": [
    "## 11. Monitor Performance and Early Stopping\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "_cell_guid": "19b328df-febe-446d-bcc9-fa6d90bae18e",
    "_uuid": "f73f66f97981081ce06a2b5ad4b9a5c0a438fe1e",
    "execution": {
     "iopub.execute_input": "2022-12-07T13:37:01.975391Z",
     "iopub.status.busy": "2022-12-07T13:37:01.974860Z",
     "iopub.status.idle": "2022-12-07T13:38:14.243374Z",
     "shell.execute_reply": "2022-12-07T13:38:14.242467Z",
     "shell.execute_reply.started": "2022-12-07T13:37:01.975340Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "IE: Introversion (I) / Extroversion (E) ...\n",
      "[0]\tvalidation_0-logloss:0.662331\n",
      "Will train until validation_0-logloss hasn't improved in 10 rounds.\n",
      "[1]\tvalidation_0-logloss:0.637307\n",
      "[2]\tvalidation_0-logloss:0.616979\n",
      "[3]\tvalidation_0-logloss:0.600483\n",
      "[4]\tvalidation_0-logloss:0.585568\n",
      "[5]\tvalidation_0-logloss:0.573552\n",
      "[6]\tvalidation_0-logloss:0.564016\n",
      "[7]\tvalidation_0-logloss:0.555667\n",
      "[8]\tvalidation_0-logloss:0.548621\n",
      "[9]\tvalidation_0-logloss:0.542487\n",
      "[10]\tvalidation_0-logloss:0.537856\n",
      "[11]\tvalidation_0-logloss:0.533571\n",
      "[12]\tvalidation_0-logloss:0.529929\n",
      "[13]\tvalidation_0-logloss:0.526731\n",
      "[14]\tvalidation_0-logloss:0.523933\n",
      "[15]\tvalidation_0-logloss:0.521377\n",
      "[16]\tvalidation_0-logloss:0.519125\n",
      "[17]\tvalidation_0-logloss:0.517464\n",
      "[18]\tvalidation_0-logloss:0.515545\n",
      "[19]\tvalidation_0-logloss:0.514147\n",
      "[20]\tvalidation_0-logloss:0.512725\n",
      "[21]\tvalidation_0-logloss:0.511898\n",
      "[22]\tvalidation_0-logloss:0.510745\n",
      "[23]\tvalidation_0-logloss:0.50952\n",
      "[24]\tvalidation_0-logloss:0.508703\n",
      "[25]\tvalidation_0-logloss:0.507359\n",
      "[26]\tvalidation_0-logloss:0.506698\n",
      "[27]\tvalidation_0-logloss:0.506086\n",
      "[28]\tvalidation_0-logloss:0.505835\n",
      "[29]\tvalidation_0-logloss:0.505516\n",
      "[30]\tvalidation_0-logloss:0.505105\n",
      "[31]\tvalidation_0-logloss:0.504036\n",
      "[32]\tvalidation_0-logloss:0.503469\n",
      "[33]\tvalidation_0-logloss:0.502987\n",
      "[34]\tvalidation_0-logloss:0.502913\n",
      "[35]\tvalidation_0-logloss:0.502389\n",
      "[36]\tvalidation_0-logloss:0.502183\n",
      "[37]\tvalidation_0-logloss:0.502166\n",
      "[38]\tvalidation_0-logloss:0.501472\n",
      "[39]\tvalidation_0-logloss:0.501143\n",
      "[40]\tvalidation_0-logloss:0.50078\n",
      "[41]\tvalidation_0-logloss:0.500258\n",
      "[42]\tvalidation_0-logloss:0.500416\n",
      "[43]\tvalidation_0-logloss:0.500031\n",
      "[44]\tvalidation_0-logloss:0.499597\n",
      "[45]\tvalidation_0-logloss:0.499505\n",
      "[46]\tvalidation_0-logloss:0.499337\n",
      "[47]\tvalidation_0-logloss:0.498855\n",
      "[48]\tvalidation_0-logloss:0.498814\n",
      "[49]\tvalidation_0-logloss:0.49901\n",
      "[50]\tvalidation_0-logloss:0.498675\n",
      "[51]\tvalidation_0-logloss:0.497657\n",
      "[52]\tvalidation_0-logloss:0.496876\n",
      "[53]\tvalidation_0-logloss:0.49647\n",
      "[54]\tvalidation_0-logloss:0.496392\n",
      "[55]\tvalidation_0-logloss:0.496134\n",
      "[56]\tvalidation_0-logloss:0.496373\n",
      "[57]\tvalidation_0-logloss:0.496297\n",
      "[58]\tvalidation_0-logloss:0.496108\n",
      "[59]\tvalidation_0-logloss:0.4962\n",
      "[60]\tvalidation_0-logloss:0.496157\n",
      "[61]\tvalidation_0-logloss:0.496195\n",
      "[62]\tvalidation_0-logloss:0.496264\n",
      "[63]\tvalidation_0-logloss:0.495954\n",
      "[64]\tvalidation_0-logloss:0.495514\n",
      "[65]\tvalidation_0-logloss:0.494948\n",
      "[66]\tvalidation_0-logloss:0.494729\n",
      "[67]\tvalidation_0-logloss:0.494131\n",
      "[68]\tvalidation_0-logloss:0.494178\n",
      "[69]\tvalidation_0-logloss:0.493897\n",
      "[70]\tvalidation_0-logloss:0.493791\n",
      "[71]\tvalidation_0-logloss:0.493636\n",
      "[72]\tvalidation_0-logloss:0.493911\n",
      "[73]\tvalidation_0-logloss:0.49372\n",
      "[74]\tvalidation_0-logloss:0.493793\n",
      "[75]\tvalidation_0-logloss:0.49375\n",
      "[76]\tvalidation_0-logloss:0.493721\n",
      "[77]\tvalidation_0-logloss:0.493469\n",
      "[78]\tvalidation_0-logloss:0.493487\n",
      "[79]\tvalidation_0-logloss:0.493669\n",
      "[80]\tvalidation_0-logloss:0.493513\n",
      "[81]\tvalidation_0-logloss:0.493183\n",
      "[82]\tvalidation_0-logloss:0.492905\n",
      "[83]\tvalidation_0-logloss:0.492902\n",
      "[84]\tvalidation_0-logloss:0.493104\n",
      "[85]\tvalidation_0-logloss:0.492952\n",
      "[86]\tvalidation_0-logloss:0.492803\n",
      "[87]\tvalidation_0-logloss:0.492743\n",
      "[88]\tvalidation_0-logloss:0.492444\n",
      "[89]\tvalidation_0-logloss:0.492691\n",
      "[90]\tvalidation_0-logloss:0.492886\n",
      "[91]\tvalidation_0-logloss:0.492851\n",
      "[92]\tvalidation_0-logloss:0.492552\n",
      "[93]\tvalidation_0-logloss:0.492387\n",
      "[94]\tvalidation_0-logloss:0.492318\n",
      "[95]\tvalidation_0-logloss:0.492264\n",
      "[96]\tvalidation_0-logloss:0.491934\n",
      "[97]\tvalidation_0-logloss:0.491976\n",
      "[98]\tvalidation_0-logloss:0.491831\n",
      "[99]\tvalidation_0-logloss:0.49177\n",
      "* IE: Introversion (I) / Extroversion (E) Accuracy: 78.17%\n",
      "NS: Intuition (N) – Sensing (S) ...\n",
      "[0]\tvalidation_0-logloss:0.642716\n",
      "Will train until validation_0-logloss hasn't improved in 10 rounds.\n",
      "[1]\tvalidation_0-logloss:0.601877\n",
      "[2]\tvalidation_0-logloss:0.568292\n",
      "[3]\tvalidation_0-logloss:0.539853\n",
      "[4]\tvalidation_0-logloss:0.516771\n",
      "[5]\tvalidation_0-logloss:0.496993\n",
      "[6]\tvalidation_0-logloss:0.480349\n",
      "[7]\tvalidation_0-logloss:0.466714\n",
      "[8]\tvalidation_0-logloss:0.455063\n",
      "[9]\tvalidation_0-logloss:0.445316\n",
      "[10]\tvalidation_0-logloss:0.436429\n",
      "[11]\tvalidation_0-logloss:0.429075\n",
      "[12]\tvalidation_0-logloss:0.422888\n",
      "[13]\tvalidation_0-logloss:0.417625\n",
      "[14]\tvalidation_0-logloss:0.413451\n",
      "[15]\tvalidation_0-logloss:0.40995\n",
      "[16]\tvalidation_0-logloss:0.406622\n",
      "[17]\tvalidation_0-logloss:0.403839\n",
      "[18]\tvalidation_0-logloss:0.401645\n",
      "[19]\tvalidation_0-logloss:0.399954\n",
      "[20]\tvalidation_0-logloss:0.398226\n",
      "[21]\tvalidation_0-logloss:0.396559\n",
      "[22]\tvalidation_0-logloss:0.395626\n",
      "[23]\tvalidation_0-logloss:0.394387\n",
      "[24]\tvalidation_0-logloss:0.393097\n",
      "[25]\tvalidation_0-logloss:0.392313\n",
      "[26]\tvalidation_0-logloss:0.391855\n",
      "[27]\tvalidation_0-logloss:0.390801\n",
      "[28]\tvalidation_0-logloss:0.39043\n",
      "[29]\tvalidation_0-logloss:0.389749\n",
      "[30]\tvalidation_0-logloss:0.389319\n",
      "[31]\tvalidation_0-logloss:0.38867\n",
      "[32]\tvalidation_0-logloss:0.388634\n",
      "[33]\tvalidation_0-logloss:0.388633\n",
      "[34]\tvalidation_0-logloss:0.388568\n",
      "[35]\tvalidation_0-logloss:0.388837\n",
      "[36]\tvalidation_0-logloss:0.388408\n",
      "[37]\tvalidation_0-logloss:0.388062\n",
      "[38]\tvalidation_0-logloss:0.387969\n",
      "[39]\tvalidation_0-logloss:0.387252\n",
      "[40]\tvalidation_0-logloss:0.386903\n",
      "[41]\tvalidation_0-logloss:0.386681\n",
      "[42]\tvalidation_0-logloss:0.38598\n",
      "[43]\tvalidation_0-logloss:0.385785\n",
      "[44]\tvalidation_0-logloss:0.385584\n",
      "[45]\tvalidation_0-logloss:0.385342\n",
      "[46]\tvalidation_0-logloss:0.385685\n",
      "[47]\tvalidation_0-logloss:0.385638\n",
      "[48]\tvalidation_0-logloss:0.385243\n",
      "[49]\tvalidation_0-logloss:0.385053\n",
      "[50]\tvalidation_0-logloss:0.384401\n",
      "[51]\tvalidation_0-logloss:0.384228\n",
      "[52]\tvalidation_0-logloss:0.383847\n",
      "[53]\tvalidation_0-logloss:0.383778\n",
      "[54]\tvalidation_0-logloss:0.383628\n",
      "[55]\tvalidation_0-logloss:0.383116\n",
      "[56]\tvalidation_0-logloss:0.382786\n",
      "[57]\tvalidation_0-logloss:0.382525\n",
      "[58]\tvalidation_0-logloss:0.382335\n",
      "[59]\tvalidation_0-logloss:0.382673\n",
      "[60]\tvalidation_0-logloss:0.382593\n",
      "[61]\tvalidation_0-logloss:0.382428\n",
      "[62]\tvalidation_0-logloss:0.382455\n",
      "[63]\tvalidation_0-logloss:0.382538\n",
      "[64]\tvalidation_0-logloss:0.382055\n",
      "[65]\tvalidation_0-logloss:0.381827\n",
      "[66]\tvalidation_0-logloss:0.381808\n",
      "[67]\tvalidation_0-logloss:0.381119\n",
      "[68]\tvalidation_0-logloss:0.381123\n",
      "[69]\tvalidation_0-logloss:0.381139\n",
      "[70]\tvalidation_0-logloss:0.380914\n",
      "[71]\tvalidation_0-logloss:0.380297\n",
      "[72]\tvalidation_0-logloss:0.380105\n",
      "[73]\tvalidation_0-logloss:0.379771\n",
      "[74]\tvalidation_0-logloss:0.379409\n",
      "[75]\tvalidation_0-logloss:0.379249\n",
      "[76]\tvalidation_0-logloss:0.379398\n",
      "[77]\tvalidation_0-logloss:0.379163\n",
      "[78]\tvalidation_0-logloss:0.378979\n",
      "[79]\tvalidation_0-logloss:0.378869\n",
      "[80]\tvalidation_0-logloss:0.378721\n",
      "[81]\tvalidation_0-logloss:0.378601\n",
      "[82]\tvalidation_0-logloss:0.378587\n",
      "[83]\tvalidation_0-logloss:0.378611\n",
      "[84]\tvalidation_0-logloss:0.378436\n",
      "[85]\tvalidation_0-logloss:0.378543\n",
      "[86]\tvalidation_0-logloss:0.378326\n",
      "[87]\tvalidation_0-logloss:0.378266\n",
      "[88]\tvalidation_0-logloss:0.378109\n",
      "[89]\tvalidation_0-logloss:0.378001\n",
      "[90]\tvalidation_0-logloss:0.377905\n",
      "[91]\tvalidation_0-logloss:0.377785\n",
      "[92]\tvalidation_0-logloss:0.377809\n",
      "[93]\tvalidation_0-logloss:0.37765\n",
      "[94]\tvalidation_0-logloss:0.377315\n",
      "[95]\tvalidation_0-logloss:0.377255\n",
      "[96]\tvalidation_0-logloss:0.377561\n",
      "[97]\tvalidation_0-logloss:0.377475\n",
      "[98]\tvalidation_0-logloss:0.377422\n",
      "[99]\tvalidation_0-logloss:0.377514\n",
      "* NS: Intuition (N) – Sensing (S) Accuracy: 86.06%\n",
      "FT: Feeling (F) - Thinking (T) ...\n",
      "[0]\tvalidation_0-logloss:0.686987\n",
      "Will train until validation_0-logloss hasn't improved in 10 rounds.\n",
      "[1]\tvalidation_0-logloss:0.680877\n",
      "[2]\tvalidation_0-logloss:0.676442\n",
      "[3]\tvalidation_0-logloss:0.672399\n",
      "[4]\tvalidation_0-logloss:0.667744\n",
      "[5]\tvalidation_0-logloss:0.663266\n",
      "[6]\tvalidation_0-logloss:0.660067\n",
      "[7]\tvalidation_0-logloss:0.656578\n",
      "[8]\tvalidation_0-logloss:0.653645\n",
      "[9]\tvalidation_0-logloss:0.650405\n",
      "[10]\tvalidation_0-logloss:0.647306\n",
      "[11]\tvalidation_0-logloss:0.644039\n",
      "[12]\tvalidation_0-logloss:0.641585\n",
      "[13]\tvalidation_0-logloss:0.638323\n",
      "[14]\tvalidation_0-logloss:0.635639\n",
      "[15]\tvalidation_0-logloss:0.633524\n",
      "[16]\tvalidation_0-logloss:0.631807\n",
      "[17]\tvalidation_0-logloss:0.630128\n",
      "[18]\tvalidation_0-logloss:0.627787\n",
      "[19]\tvalidation_0-logloss:0.62606\n",
      "[20]\tvalidation_0-logloss:0.624538\n",
      "[21]\tvalidation_0-logloss:0.62243\n",
      "[22]\tvalidation_0-logloss:0.620698\n",
      "[23]\tvalidation_0-logloss:0.619017\n",
      "[24]\tvalidation_0-logloss:0.617105\n",
      "[25]\tvalidation_0-logloss:0.615611\n",
      "[26]\tvalidation_0-logloss:0.614606\n",
      "[27]\tvalidation_0-logloss:0.612685\n",
      "[28]\tvalidation_0-logloss:0.611047\n",
      "[29]\tvalidation_0-logloss:0.609578\n",
      "[30]\tvalidation_0-logloss:0.608736\n",
      "[31]\tvalidation_0-logloss:0.607638\n",
      "[32]\tvalidation_0-logloss:0.606005\n",
      "[33]\tvalidation_0-logloss:0.604399\n",
      "[34]\tvalidation_0-logloss:0.603225\n",
      "[35]\tvalidation_0-logloss:0.601777\n",
      "[36]\tvalidation_0-logloss:0.600576\n",
      "[37]\tvalidation_0-logloss:0.599288\n",
      "[38]\tvalidation_0-logloss:0.598361\n",
      "[39]\tvalidation_0-logloss:0.59679\n",
      "[40]\tvalidation_0-logloss:0.595524\n",
      "[41]\tvalidation_0-logloss:0.594332\n",
      "[42]\tvalidation_0-logloss:0.593456\n",
      "[43]\tvalidation_0-logloss:0.59237\n",
      "[44]\tvalidation_0-logloss:0.591068\n",
      "[45]\tvalidation_0-logloss:0.589851\n",
      "[46]\tvalidation_0-logloss:0.588608\n",
      "[47]\tvalidation_0-logloss:0.587813\n",
      "[48]\tvalidation_0-logloss:0.586749\n",
      "[49]\tvalidation_0-logloss:0.585916\n",
      "[50]\tvalidation_0-logloss:0.585181\n",
      "[51]\tvalidation_0-logloss:0.584325\n",
      "[52]\tvalidation_0-logloss:0.583632\n",
      "[53]\tvalidation_0-logloss:0.583007\n",
      "[54]\tvalidation_0-logloss:0.582656\n",
      "[55]\tvalidation_0-logloss:0.582249\n",
      "[56]\tvalidation_0-logloss:0.58162\n",
      "[57]\tvalidation_0-logloss:0.581013\n",
      "[58]\tvalidation_0-logloss:0.579884\n",
      "[59]\tvalidation_0-logloss:0.579104\n",
      "[60]\tvalidation_0-logloss:0.578466\n",
      "[61]\tvalidation_0-logloss:0.577754\n",
      "[62]\tvalidation_0-logloss:0.576801\n",
      "[63]\tvalidation_0-logloss:0.576105\n",
      "[64]\tvalidation_0-logloss:0.575573\n",
      "[65]\tvalidation_0-logloss:0.574635\n",
      "[66]\tvalidation_0-logloss:0.574104\n",
      "[67]\tvalidation_0-logloss:0.573367\n",
      "[68]\tvalidation_0-logloss:0.572391\n",
      "[69]\tvalidation_0-logloss:0.571664\n",
      "[70]\tvalidation_0-logloss:0.571227\n",
      "[71]\tvalidation_0-logloss:0.570477\n",
      "[72]\tvalidation_0-logloss:0.569631\n",
      "[73]\tvalidation_0-logloss:0.568728\n",
      "[74]\tvalidation_0-logloss:0.568402\n",
      "[75]\tvalidation_0-logloss:0.567981\n",
      "[76]\tvalidation_0-logloss:0.567365\n",
      "[77]\tvalidation_0-logloss:0.566824\n",
      "[78]\tvalidation_0-logloss:0.566138\n",
      "[79]\tvalidation_0-logloss:0.565949\n",
      "[80]\tvalidation_0-logloss:0.565291\n",
      "[81]\tvalidation_0-logloss:0.564829\n",
      "[82]\tvalidation_0-logloss:0.564255\n",
      "[83]\tvalidation_0-logloss:0.563892\n",
      "[84]\tvalidation_0-logloss:0.56315\n",
      "[85]\tvalidation_0-logloss:0.562799\n",
      "[86]\tvalidation_0-logloss:0.562641\n",
      "[87]\tvalidation_0-logloss:0.562472\n",
      "[88]\tvalidation_0-logloss:0.561927\n",
      "[89]\tvalidation_0-logloss:0.56132\n",
      "[90]\tvalidation_0-logloss:0.560924\n",
      "[91]\tvalidation_0-logloss:0.56052\n",
      "[92]\tvalidation_0-logloss:0.559884\n",
      "[93]\tvalidation_0-logloss:0.55937\n",
      "[94]\tvalidation_0-logloss:0.559165\n",
      "[95]\tvalidation_0-logloss:0.558881\n",
      "[96]\tvalidation_0-logloss:0.558403\n",
      "[97]\tvalidation_0-logloss:0.558201\n",
      "[98]\tvalidation_0-logloss:0.558009\n",
      "[99]\tvalidation_0-logloss:0.557773\n",
      "* FT: Feeling (F) - Thinking (T) Accuracy: 71.78%\n",
      "JP: Judging (J) – Perceiving (P) ...\n",
      "[0]\tvalidation_0-logloss:0.68412\n",
      "Will train until validation_0-logloss hasn't improved in 10 rounds.\n",
      "[1]\tvalidation_0-logloss:0.676778\n",
      "[2]\tvalidation_0-logloss:0.670086\n",
      "[3]\tvalidation_0-logloss:0.66531\n",
      "[4]\tvalidation_0-logloss:0.661329\n",
      "[5]\tvalidation_0-logloss:0.657959\n",
      "[6]\tvalidation_0-logloss:0.655017\n",
      "[7]\tvalidation_0-logloss:0.651982\n",
      "[8]\tvalidation_0-logloss:0.649613\n",
      "[9]\tvalidation_0-logloss:0.647477\n",
      "[10]\tvalidation_0-logloss:0.645069\n",
      "[11]\tvalidation_0-logloss:0.643491\n",
      "[12]\tvalidation_0-logloss:0.64246\n",
      "[13]\tvalidation_0-logloss:0.641341\n",
      "[14]\tvalidation_0-logloss:0.640292\n",
      "[15]\tvalidation_0-logloss:0.639504\n",
      "[16]\tvalidation_0-logloss:0.63837\n",
      "[17]\tvalidation_0-logloss:0.637502\n",
      "[18]\tvalidation_0-logloss:0.636853\n",
      "[19]\tvalidation_0-logloss:0.636331\n",
      "[20]\tvalidation_0-logloss:0.63597\n",
      "[21]\tvalidation_0-logloss:0.635484\n",
      "[22]\tvalidation_0-logloss:0.63452\n",
      "[23]\tvalidation_0-logloss:0.634285\n",
      "[24]\tvalidation_0-logloss:0.633793\n",
      "[25]\tvalidation_0-logloss:0.633419\n",
      "[26]\tvalidation_0-logloss:0.632503\n",
      "[27]\tvalidation_0-logloss:0.631963\n",
      "[28]\tvalidation_0-logloss:0.631918\n",
      "[29]\tvalidation_0-logloss:0.631612\n",
      "[30]\tvalidation_0-logloss:0.630887\n",
      "[31]\tvalidation_0-logloss:0.630196\n",
      "[32]\tvalidation_0-logloss:0.630001\n",
      "[33]\tvalidation_0-logloss:0.629708\n",
      "[34]\tvalidation_0-logloss:0.629344\n",
      "[35]\tvalidation_0-logloss:0.628523\n",
      "[36]\tvalidation_0-logloss:0.628489\n",
      "[37]\tvalidation_0-logloss:0.628435\n",
      "[38]\tvalidation_0-logloss:0.627665\n",
      "[39]\tvalidation_0-logloss:0.627234\n",
      "[40]\tvalidation_0-logloss:0.627269\n",
      "[41]\tvalidation_0-logloss:0.627016\n",
      "[42]\tvalidation_0-logloss:0.626586\n",
      "[43]\tvalidation_0-logloss:0.626356\n",
      "[44]\tvalidation_0-logloss:0.626436\n",
      "[45]\tvalidation_0-logloss:0.626113\n",
      "[46]\tvalidation_0-logloss:0.62583\n",
      "[47]\tvalidation_0-logloss:0.625961\n",
      "[48]\tvalidation_0-logloss:0.625955\n",
      "[49]\tvalidation_0-logloss:0.626047\n",
      "[50]\tvalidation_0-logloss:0.625649\n",
      "[51]\tvalidation_0-logloss:0.625343\n",
      "[52]\tvalidation_0-logloss:0.6252\n",
      "[53]\tvalidation_0-logloss:0.624915\n",
      "[54]\tvalidation_0-logloss:0.624589\n",
      "[55]\tvalidation_0-logloss:0.624122\n",
      "[56]\tvalidation_0-logloss:0.624117\n",
      "[57]\tvalidation_0-logloss:0.624063\n",
      "[58]\tvalidation_0-logloss:0.623616\n",
      "[59]\tvalidation_0-logloss:0.623444\n",
      "[60]\tvalidation_0-logloss:0.623091\n",
      "[61]\tvalidation_0-logloss:0.623046\n",
      "[62]\tvalidation_0-logloss:0.622872\n",
      "[63]\tvalidation_0-logloss:0.623085\n",
      "[64]\tvalidation_0-logloss:0.622974\n",
      "[65]\tvalidation_0-logloss:0.623051\n",
      "[66]\tvalidation_0-logloss:0.622714\n",
      "[67]\tvalidation_0-logloss:0.622806\n",
      "[68]\tvalidation_0-logloss:0.62286\n",
      "[69]\tvalidation_0-logloss:0.622433\n",
      "[70]\tvalidation_0-logloss:0.622073\n",
      "[71]\tvalidation_0-logloss:0.622032\n",
      "[72]\tvalidation_0-logloss:0.621954\n",
      "[73]\tvalidation_0-logloss:0.621886\n",
      "[74]\tvalidation_0-logloss:0.621886\n",
      "[75]\tvalidation_0-logloss:0.622141\n",
      "[76]\tvalidation_0-logloss:0.622075\n",
      "[77]\tvalidation_0-logloss:0.62206\n",
      "[78]\tvalidation_0-logloss:0.621653\n",
      "[79]\tvalidation_0-logloss:0.621415\n",
      "[80]\tvalidation_0-logloss:0.621335\n",
      "[81]\tvalidation_0-logloss:0.621407\n",
      "[82]\tvalidation_0-logloss:0.621033\n",
      "[83]\tvalidation_0-logloss:0.62105\n",
      "[84]\tvalidation_0-logloss:0.621188\n",
      "[85]\tvalidation_0-logloss:0.621116\n",
      "[86]\tvalidation_0-logloss:0.621185\n",
      "[87]\tvalidation_0-logloss:0.621267\n",
      "[88]\tvalidation_0-logloss:0.620908\n",
      "[89]\tvalidation_0-logloss:0.620895\n",
      "[90]\tvalidation_0-logloss:0.620546\n",
      "[91]\tvalidation_0-logloss:0.620165\n",
      "[92]\tvalidation_0-logloss:0.620031\n",
      "[93]\tvalidation_0-logloss:0.619816\n",
      "[94]\tvalidation_0-logloss:0.619813\n",
      "[95]\tvalidation_0-logloss:0.619879\n",
      "[96]\tvalidation_0-logloss:0.620166\n",
      "[97]\tvalidation_0-logloss:0.619736\n",
      "[98]\tvalidation_0-logloss:0.619704\n",
      "[99]\tvalidation_0-logloss:0.619653\n",
      "* JP: Judging (J) – Perceiving (P) Accuracy: 65.70%\n"
     ]
    }
   ],
   "source": [
    "# Let's train type indicator individually\n",
    "for l in range(len(type_indicators)):\n",
    "    print(\"%s ...\" % (type_indicators[l]))\n",
    "    \n",
    "    Y = list_personality[:,l]\n",
    "\n",
    "    # split data into train and test sets\n",
    "    seed = 7\n",
    "    test_size = 0.33\n",
    "    X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=test_size, random_state=seed)\n",
    "\n",
    "    # fit model on training data\n",
    "    model = XGBClassifier()\n",
    "    eval_set = [(X_test, y_test)]\n",
    "    model.fit(X_train, y_train, early_stopping_rounds=10, eval_metric=\"logloss\", eval_set=eval_set, verbose=True)\n",
    "\n",
    "    # make predictions for test data\n",
    "    y_pred = model.predict(X_test)\n",
    "    predictions = [round(value) for value in y_pred]\n",
    "    # evaluate predictions\n",
    "    accuracy = accuracy_score(y_test, predictions)\n",
    "    print(\"* %s Accuracy: %.2f%%\" % (type_indicators[l], accuracy * 100.0))\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_cell_guid": "2bd23c47-29d4-47cf-ad69-a368992f00c9",
    "_uuid": "83cfd3b2eeab49cb22a7b6b2d3094728a1a54d82"
   },
   "source": [
    "## 12. Show feature importance plot and list for the first indicator:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "_cell_guid": "47190dab-9c61-446e-be5d-d344eef60b7d",
    "_uuid": "875cd02eb43ff88ffc5736dce112d2e429483705",
    "execution": {
     "iopub.execute_input": "2022-12-07T13:38:14.245264Z",
     "iopub.status.busy": "2022-12-07T13:38:14.244794Z",
     "iopub.status.idle": "2022-12-07T13:38:39.248114Z",
     "shell.execute_reply": "2022-12-07T13:38:39.247212Z",
     "shell.execute_reply.started": "2022-12-07T13:38:14.245202Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA4IAAAR8CAYAAADINiqGAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4xLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvAOZPmwAAIABJREFUeJzs3X24nWV9J/rvTwIW40uEkBBJaYrg\n2yGa1hfgOjUTilEQX6o4hhxaSEOl6FDURtvMnDOMzoyX0Q6HesbpIBoMUzVARUCCZuSlyzrW2hEb\nIYqR0dlW1KRFyJSkjGXH+/yxF7gTg2RD9lrZ+/l8rmtfrHU/9/Pcv7Xzu7jyzfOyqrUWAAAAuuMJ\nwy4AAACAwRIEAQAAOkYQBAAA6BhBEAAAoGMEQQAAgI4RBAEAADpGEASAfVRVl1bVvx52HQDweJXv\nEQRgslXVSJK5SXaNG35Wa+0Hj+OYS5J8rLU2//FVNzVV1bokd7fW/p9h1wLA1OOMIACD8urW2pPH\n/TzmELg/VNWMYa7/eFTVQcOuAYCpTRAEYKiq6sSq+suq2l5VX+uf6Xto229X1Z1VdX9Vfaeqfrc/\nPjPJZ5M8o6p29H+eUVXrqurfj9t/SVXdPe79SFX9YVXdnmRnVc3o73dNVf19Vf3Pqrrw59T68PEf\nOnZV/UFV/V1V/bCqfqOqXllV36qqe6vqX43b911V9cmquqr/eb5aVS8Yt/25VdXr/x6+XlWv2WPd\n/1xVn6mqnUnOTXJWkj/of/Yb+vNWV9W3+8f/RlW9btwxVlTVf6uq/1BV9/U/62njth9WVR+tqh/0\nt183bturqmpTv7a/rKrn7/MfMAAHJEEQgKGpqqOS3Jjk3yc5LMk7klxTVUf0p/xdklcleWqS305y\nSVX9amttZ5LTkvzgMZxhXJ7k9CSzkvwkyQ1JvpbkqCSnJHlbVb1iH491ZJJf6O97UZIPJ/nNJC9M\n8tIk/7qqfnnc/Ncm+bP+Z/1Ekuuq6uCqOrhfx+eSzEnye0k+XlXPHrfv/5XkPUmekuS/JPl4kvf3\nP/ur+3O+3V/3aUneneRjVTVv3DFOSLIlyewk70+ytqqqv+1Pkzwpyf/Rr+GSJKmqX0lyeZLfTXJ4\nkg8l+XRVPXEff0cAHIAEQQAG5br+GaXt4842/WaSz7TWPtNa+0lr7aYkX0nyyiRprd3YWvt2G/P5\n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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f5cb0c1afd0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from xgboost import plot_importance\n",
    "\n",
    "# Only the 1st indicator\n",
    "y = list_personality[:,0]\n",
    "# fit model on training data\n",
    "model = XGBClassifier()\n",
    "model.fit(X, y)\n",
    "# plot feature importance\n",
    "ax = plot_importance(model, max_num_features=25)\n",
    "\n",
    "fig = ax.figure\n",
    "fig.set_size_inches(15, 20)\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "_cell_guid": "26acec59-e08a-4f0c-97cf-db45f0406fa0",
    "_uuid": "03a460ac630d758cfa64fd2cb89ade4c3943f9ac",
    "execution": {
     "iopub.execute_input": "2022-12-07T13:38:39.249577Z",
     "iopub.status.busy": "2022-12-07T13:38:39.249159Z",
     "iopub.status.idle": "2022-12-07T13:38:39.413203Z",
     "shell.execute_reply": "2022-12-07T13:38:39.412168Z",
     "shell.execute_reply.started": "2022-12-07T13:38:39.249531Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "461\t0.039074\tne\n",
      "267\t0.024602\tfun\n",
      "291\t0.024602\tguy\n",
      "670\t0.021708\tsuper\n",
      "53\t0.017366\tawesome\n",
      "403\t0.017366\tlol\n",
      "467\t0.017366\tni\n",
      "75\t0.015919\tbored\n",
      "139\t0.014472\tcrazy\n",
      "313\t0.014472\they\n",
      "772\t0.014472\tworld\n",
      "271\t0.013025\tgame\n",
      "386\t0.013025\tlet\n",
      "465\t0.013025\tnew\n",
      "477\t0.013025\tnt\n",
      "551\t0.013025\tquiet\n",
      "158\t0.011577\tdebate\n",
      "235\t0.011577\tfamily\n",
      "292\t0.011577\thaha\n",
      "783\t0.011577\txd\n",
      "163\t0.010130\tdefinitely\n",
      "440\t0.010130\tmind\n",
      "605\t0.010130\tshit\n",
      "722\t0.010130\tturn\n",
      "229\t0.008683\teye\n"
     ]
    }
   ],
   "source": [
    "features = sorted(list(enumerate(model.feature_importances_)), key=lambda x: x[1], reverse=True)\n",
    "for f in features[0:25]:\n",
    "    print(\"%d\\t%f\\t%s\" % (f[0],f[1],cntizer.get_feature_names()[f[0]]))\n",
    "    \n",
    "# Save xgb_params for late discussuin\n",
    "default_get_xgb_params = model.get_xgb_params()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "_cell_guid": "310792d7-ce3b-4e7d-8dd7-76e5a03f14ca",
    "_uuid": "549735e9e451517c903973cda8e9d2c018822c70",
    "execution": {
     "iopub.execute_input": "2022-12-07T13:38:39.414714Z",
     "iopub.status.busy": "2022-12-07T13:38:39.414213Z",
     "iopub.status.idle": "2022-12-07T13:38:39.421238Z",
     "shell.execute_reply": "2022-12-07T13:38:39.420346Z",
     "shell.execute_reply.started": "2022-12-07T13:38:39.414668Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'base_score': 0.5, 'booster': 'gbtree', 'colsample_bylevel': 1, 'colsample_bytree': 1, 'gamma': 0, 'learning_rate': 0.1, 'max_delta_step': 0, 'max_depth': 3, 'min_child_weight': 1, 'missing': None, 'n_estimators': 100, 'nthread': 1, 'objective': 'binary:logistic', 'reg_alpha': 0, 'reg_lambda': 1, 'scale_pos_weight': 1, 'seed': 0, 'silent': 1, 'subsample': 1}\n"
     ]
    }
   ],
   "source": [
    "# Save xgb_params for later discussuin\n",
    "default_get_xgb_params = model.get_xgb_params()\n",
    "print (default_get_xgb_params)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-12-07T13:38:39.422560Z",
     "iopub.status.busy": "2022-12-07T13:38:39.422275Z",
     "iopub.status.idle": "2022-12-07T13:38:39.444505Z",
     "shell.execute_reply": "2022-12-07T13:38:39.443205Z",
     "shell.execute_reply.started": "2022-12-07T13:38:39.422508Z"
    }
   },
   "outputs": [],
   "source": [
    "def plot_confusion_matrix(\n",
    "        cm, \n",
    "        classes,\n",
    "        normalize=False,\n",
    "        title=\"Confusion Matrix\",\n",
    "        cmap=plt.cm.Blues):\n",
    "    \n",
    "    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n",
    "    plt.title(title)\n",
    "    plt.colorbar()\n",
    "    tick_marks = np.arange(len(classes))\n",
    "    plt.xticks(tick_marks, classes, rotation=45)\n",
    "    plt.yticks(tick_marks, classes)\n",
    "    \n",
    "    if normalize: \n",
    "        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]\n",
    "        print('Normalized confusion matrix')\n",
    "    else:\n",
    "        print('Confusion matrix, without normalization')\n",
    "        \n",
    "    print(cm)\n",
    "    \n",
    "    thresh = cm.max() / 2\n",
    "    \n",
    "    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n",
    "        plt.text(j, i, cm[i, j],\n",
    "                 horizontalalignment='center',\n",
    "                 color='white' if cm[i,j] > thresh else 'black')\n",
    "        \n",
    "    plt.tight_layout()\n",
    "    plt.ylabel('True label')\n",
    "    plt.xlabel('Predicted label')\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "_cell_guid": "cf65a6b7-cc0e-427e-985f-72f7cce6c939",
    "_uuid": "c4d18a0728d1d5a88756838810569b9bc949ff51",
    "execution": {
     "iopub.execute_input": "2022-12-07T13:38:39.446374Z",
     "iopub.status.busy": "2022-12-07T13:38:39.445811Z",
     "iopub.status.idle": "2022-12-07T13:39:27.579206Z",
     "shell.execute_reply": "2022-12-07T13:39:27.578273Z",
     "shell.execute_reply.started": "2022-12-07T13:38:39.446323Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "IE: Introversion (I) / Extroversion (E) ...\n",
      "* IE: Introversion (I) / Extroversion (E) Accuracy: 79.01%\n",
      "Confusion matrix, without normalization\n",
      "[[2172   57]\n",
      " [ 544   90]]\n"
     ]
    },
    {
     "data": {
      "image/png": "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\nAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f5cb0acb438>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "NS: Intuition (N) – Sensing (S) ...\n",
      "* NS: Intuition (N) – Sensing (S) Accuracy: 85.96%\n",
      "Confusion matrix, without normalization\n",
      "[[2454    9]\n",
      " [ 393    7]]\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAV4AAAEmCAYAAAAqWvi2AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4xLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvAOZPmwAAIABJREFUeJzt3XecVNXdx/HPdxdQKQo2bIkVe8Pe\nRaMESxQTu7FEI+qjT0wxjxhNUKOJJTGKNXaNPSaWKBZEsTdQVFDsUVEUATtI/T1/3DM6rLuzA8zO\n7N39vn3Na2fOPffeM4P72zO/e+45igjMzKx66mrdADOz9saB18ysyhx4zcyqzIHXzKzKHHjNzKrM\ngdfMrMoceK0mJC0k6T+SPpP0z/k4zgGS7q9k22pB0j2SDq51O6w6HHitJEn7Sxoh6UtJ41OA2KoC\nh94T6AksFhF7zetBIuL6iOhbgfbMQVIfSSHptgbl66Xy4WUe52RJ1zVXLyJ2iohr5rG5ljMOvNYk\nSb8GzgX+RBYkvw9cBOxegcMvD7wWETMrcKyW8jGwuaTFisoOBl6r1AmU8e9hexMRfvjxnQewCPAl\nsFeJOguQBeYP0uNcYIG0rQ8wDvgNMAEYD/wsbTsFmA7MSOc4DDgZuK7o2CsAAXRIrw8B3gK+AN4G\nDigqf6xovy2AZ4HP0s8tirYNB/4IPJ6Ocz+weBPvrdD+S4CjU1k98D7wB2B4Ud3zgPeAz4GRwNap\nvF+D9/lCUTtOT+2YCqySyn6etl8M/Kvo+GcCwwDV+v8LPyrz8F9aa8rmwILAbSXqnAhsBqwPrAds\nApxUtH0psgC+LFlwvVBSj4gYRNaLvjkiukbEFaUaIqkLMBjYKSK6kQXXUY3UWxS4O9VdDDgHuLtB\nj3V/4GfAkkAn4LhS5wauBQ5Kz38IjCb7I1PsWbLPYFHgBuCfkhaMiHsbvM/1ivY5EBgAdAPeaXC8\n3wDrSDpE0tZkn93BkaKw5Z8DrzVlMWBilE4FHACcGhETIuJjsp7sgUXbZ6TtMyJiCFmvb7V5bM9s\nYG1JC0XE+IgY00idXYDXI+IfETEzIm4ExgI/KqpzVUS8FhFTgVvIAmaTIuIJYFFJq5EF4GsbqXNd\nRExK5/wr2TeB5t7n1RExJu0zo8HxppB9jucA1wH/GxHjmjme5YgDrzVlErC4pA4l6izDnL21d1LZ\nN8doELinAF3ntiER8RWwD3AkMF7S3ZJWL6M9hTYtW/T6w3lozz+AY4DtaOQbgKTjJL2SRmh8StbL\nX7yZY75XamNEPE2WWhHZHwhrQxx4rSlPAtOA/iXqfEB2kazg+3z3a3i5vgI6F71eqnhjRNwXETsC\nS5P1Yi8roz2FNr0/j20q+AfwP8CQ1Bv9RkoF/B+wN9AjIrqT5ZdVaHoTxyyZNpB0NFnP+YN0fGtD\nHHitURHxGdlFpAsl9ZfUWVJHSTtJOitVuxE4SdISkhZP9ZsdOtWEUcA2kr4vaRHghMIGST0l7Z5y\nvdPIUhazGznGEGDVNASug6R9gDWBu+axTQBExNvAtmQ57Ya6ATPJRkB0kPQHYOGi7R8BK8zNyAVJ\nqwKnAT8lSzn8n6SSKRHLFwdea1LKV/6a7ILZx2Rfj48Bbk9VTgNGAC8CLwHPpbJ5OddQ4OZ0rJHM\nGSzrUjs+ACaTBcGjGjnGJGBXsotTk8h6irtGxMR5aVODYz8WEY315u8D7iUbYvYO8DVzphEKN4dM\nkvRcc+dJqZ3rgDMj4oWIeB34HfAPSQvMz3uw1kO+UGpmVl3u8ZqZVZkDr5lZlTnwmplVmQOvmVmV\nlRocbxWgDguFOnWrdTPatd5rfL/WTWj3nntu5MSIWKJSx6tfePmImVNL1ompH98XEf0qdc5KcuBt\nYerUjQVW27vWzWjXHn/6glo3od1bqKMa3lE4X2Lm1GZ/r74edWFzdw/WjAOvmeWPBHX1tW7FPHPg\nNbN8yvE0xg68ZpZPUvN1WikHXjPLIacazMyqSzjVYGZWXXKqwcys6pxqMDOrJjnVYGZWVcKpBjOz\nqnOP18ysmgT1zvGamVWPh5OZmdWAc7xmZtXkO9fMzKrPqQYzsyqS71wzM6s+pxrMzKrJd66ZmVWf\nUw1mZlUkQV1+w1d+W25m7Zt7vGZmVeYcr5lZFXmVYTOzGnCqwcysuuTAa2ZWPRKozoHXzKyK5B6v\nmVm1OfCamVVZXZ2Hk5mZVY/SI6cceM0sd5TzHG9+++pm1q7V1dWVfDRH0vckPSTpZUljJB2byheV\nNFTS6+lnj1QuSYMlvSHpRUkbFB3r4FT/dUkHN9v2+XjfZmY1I6nkowwzgd9ExJrAZsDRktYEBgLD\nIqIXMCy9BtgJ6JUeA4CLUzsWBQYBmwKbAIMKwbopDrxmlj8q49GMiBgfEc+l518ArwDLArsD16Rq\n1wD90/PdgWsj8xTQXdLSwA+BoRExOSI+AYYC/Uqd2zleM8ulMnq1i0saUfT60oi4tIljrQD0Bp4G\nekbE+LTpQ6Bner4s8F7RbuNSWVPlTXLgNbPcESonjzsxIjZq9lhSV+BfwC8j4vPigB4RISnmq7GN\ncKrBzPJpPlMNAJI6kgXd6yPi36n4o5RCIP2ckMrfB75XtPtyqayp8iY58JpZ/mj+L64pq3QF8EpE\nnFO06U6gMDLhYOCOovKD0uiGzYDPUkriPqCvpB7polrfVNYkpxrMLJcqcOfalsCBwEuSRqWy3wFn\nALdIOgx4B9g7bRsC7Ay8AUwBfgYQEZMl/RF4NtU7NSImlzqxA6+Z5U4lbqCIiMdoOinxg0bqB3B0\nE8e6Eriy3HM71dAOLdezO/de+gue+9eJjLz1RI7er88c2489cHumPn8Bi3XvAsDWG/biw0fO5qmb\nBvLUTQM5YcCcI2Xq6sSTNx7Pv847slpvod24YPB5bLj+2myw3lqcf965tW5O61KBHG+tuMfbDs2c\nNZuB5/ybUWPH0bXzAjxxw/EMe3osY9/6kOV6ducHm63Bu+Pn/Kb0+PNv8pNjL2n0eMfsvx2vvv0R\n3bosWI3mtxtjRo/mqisv49EnnqFTp07stks/dt5lV1ZeZZVaN632lO9JcvLbcptnH078nFFjxwHw\n5ZRpjH37Q5ZZojsAZx33E04873ayb1XNW3bJ7vTbai2uuu2JFmtvezV27CtsvPGmdO7cmQ4dOrD1\nNtty++3/bn7HdqICd67VjANvO/f9pRdl/dWW49nR/2XXPuvwwYRPeem1746E2XTdFXn65oHcfsFR\nrLHSUt+Un/3bLFDPnl3xoY7t3lprrc3jjz/KpEmTmDJlCvfeM4Rx773X/I7tRY5TDS0WeCV9WUad\nX0rqXEa9IyUdlJ4fImmZom2Xp/ur55uk/pL+kJ6fLGmKpCWLtn+ZfnaS9IikXKdquizUiRv/8nN+\n+5d/MXPWLP7v0B9y6sV3f6feqLHvsdrOv2fTfc7g4pse5pa/DQBgp63XZsLkL3j+FQeDlrD6Gmvw\nm+OO50c79WW3Xfqx3nrrU1+f35V1K0nSfE+SU0u1bt0vgWYDb0RcEhHXppeHAMsUbft5RLxcofb8\nH3BR0euJwG8aac90sskz9qnQeauuQ4c6bvzL4dx8zwjuePAFVlpuCZZfdjGeufkExt59Cssu2Z0n\nbzienot144uvvuarqdMBuO+xl+nYoZ7Fundh8/VXYtdt12Hs3adw7Rk/o8/Gq3LlaQfV+J21LYcc\nehhPPDOSBx56hO49etCr16q1blKr4VRDCZL6SBou6VZJYyVdnwYg/4IsgD4k6aFU98ui/faUdHV6\nfrKk4yTtCWwEXC9plKSF0rE3SvX2k/SSpNGSziw61peSTpf0gqSnJPWkAUmrAtMiYmJR8ZXAPmn2\noYZuBw6Y38+nVi4ZdACvvv0hg697EIAxb3zA8j84gdV3GcTquwzi/Qmfsvn+Z/LRpC/ouVi3b/bb\naK3lqZOY9OlX/OH8O1ml3+9ZfZdBHDTwKoY/+xqHnnRtU6e0eTBhQnbT1Lvvvssdt/+bffbbv8Yt\naj3yHHir9VW5N7AW8AHwOLBlRAyW9GtguwbBrkkRcaukY4DjImIEfDtRRko/nAlsCHwC3C+pf0Tc\nDnQBnoqIEyWdBRwOnNbg8FsCzzUo+5Is+B5LNu1bsdHAxo21U9IAsmnjoGPXct5aVW2x/kocsOum\nvPTa+zx1Uzbj3aAL7uS+xxr/4rDHDr05fK+tmTlrFl9/PYODTriqms1t1/bb+ydMnjyJjh06cu7g\nC+nevXutm9RqeJXh5j0TEeMA0h0iKwCPVfgcGwPDI+LjdJ7rgW3IeqbTgbtSvZHAjo3svzTwcSPl\ng4FRkv5SXBgRsyRNl9QtTSlXvO1S4FKAus5LtrqrTk+MeouFeh9Tss7qu3z7d+aSmx/hkpsfKVn/\n0ZGv8+jI1yvSPvvWsOGP1roJrZO82GU5phU9n1XivMVBqpKDQmfEt+Ojmjr/VGCR7zQo4lNJN9D4\nHSsLAF9XrJVmVhYBOY67Nb+49gXQrej1R5LWkFQH7FHmPgXPANtKWlxSPbAf8PBctOUVoKmR6ecA\nR1AUsCUtRjbt3Iy5OIeZVYSoqyv9aM1qHXgvBe4tXFwjW2LjLuAJYHwT+1wNXFK4uFYoTLMEDQQe\nAl4ARkbEHY0folGPAL3VyPeXlIO+jayHW7Ad8N2xV2ZWFXm+uKZy71BqDySdB/wnIh4oo+6/gYER\n8VqpenWdl4wFVtu7VBVrYZ88e0Gtm9DuLdRRI8uZlLxcCy69aqxw8Pkl67x6Zr+KnrOScn0DQAv4\nE9mCdSVJ6gTc3lzQNbOWIaC+vnX3aktx4C0SER+RTXbcXL3pgAesmtVQa08nlOLAa2b5o3yPanDg\nNbPcKXOxy1bLgdfMcsk9XjOzKnOO18ysmpzjNTOrLkGrvzutFAdeM8slpxrMzKosx3HXgdfM8kdy\nqsHMrMpa/0Q4pTjwmlku5TjuOvCaWQ451WBmVl3ZChQOvGZmVeXAa2ZWZU41mJlVU85vGc7vvGpm\n1m6J0uutlZuGkHSlpAmSRheVnSzp/bSu4yhJOxdtO0HSG5JelfTDovJ+qewNSQObO2+TPV5JC5fa\nMSI+b/5tmZm1jPrKpBquBi7guyvK/C0i/lJcIGlNYF9gLWAZ4AFJq6bNFwI7AuOAZyXdGREvN3XS\nUqmGMUCQXUAsKLwO4PvNvCEzsxZTiVRDRDwiaYUyq+8O3BQR04C3Jb0BbJK2vRERb2Xt0k2p7twH\n3oj4XpmNMTOrKqmsUQ2LSxpR9PrSiLi0zFMcI+kgYATwm4j4BFgWeKqozrhUBvBeg/KSi+aWleOV\ntK+k36Xny0nasMzGm5m1iPo6lXwAEyNio6JHuUH3YmBlYH1gPPDXSre92cAr6QJgO+DAVDQFuKTS\nDTEzmxtS6ce8ioiPImJWRMwGLuPbdML7QHEmYLlU1lR5k8rp8W4REUcAX6dGTQY6lfUOzMxagEgj\nG0r8N8/HlpYuerkHUBjxcCewr6QFJK0I9AKeAZ4FeklaUVInsgtwd5Y6RznjeGdIqiO7oIakxYDZ\nc/VOzMwqSarIqAZJNwJ9yPLB44BBQB9J65PFvP8CRwBExBhJt5BdNJsJHB0Rs9JxjgHuA+qBKyNi\nTKnzlhN4LwT+BSwh6RRgb+CUuX2DZmaVVKFRDfs1UnxFifqnA6c3Uj4EGFLueZsNvBFxraSRwA6p\naK+IGF1qHzOzliSgLse3rpV7y3A9MIOs6+273cys5vI8V0M5oxpOBG4ku1NjOeAGSSe0dMPMzJrS\n3IiG1t4ZLqfHexDQOyKmAEg6HXge+HNLNszMrJS2nmoY36Beh1RmZlYz+Q27pSfJ+RtZTncyMEbS\nfel1X7Jxa2ZmNSEqNklOTZTq8RZGLowB7i4qf6qRumZm1TMXUz+2RqUmyWlyLJuZWa3lOO42n+OV\ntDLZgOE1gQUL5RGxapM7mZm1oLynGsoZk3s1cBXZe90JuAW4uQXbZGbWrEqsQFEr5QTezhFxH0BE\nvBkRJ5EFYDOzmlEzj9asnOFk09IkOW9KOpJsurNuLdssM7OmSflONZQTeH8FdAF+QZbrXQQ4tCUb\nZWbWnNaeTiilnElynk5Pv+DbydDNzGoqx3G35A0Ut5Hm4G1MRPy4RVpkZtYMVWg+3lop1eO9oGqt\naMPW7LUctw45s9bNMGtz2mSqISKGVbMhZmZzI8/z05Y7H6+ZWauR9xsoHHjNLJdyHHfLD7ySFoiI\naS3ZGDOzcmSTnec38pazAsUmkl4CXk+v15N0fou3zMyshPq60o/WrJzmDQZ2BSYBRMQLwHYt2Sgz\ns1IKi12WerRm5aQa6iLinQbd+lkt1B4zs7K08k5tSeUE3vckbQKEpHrgf4HXWrZZZmZNa8s3UBQc\nRZZu+D7wEfBAKjMzq5lWnk0oqZy5GiYA+1ahLWZmZctxh7esFSguo5E5GyJiQIu0yMysGYWLa3lV\nTqrhgaLnCwJ7AO+1THPMzMqg1j9krJRyUg1zLPMj6R/AYy3WIjOzMqjVrzPRtHm5ZXhFoGelG2Jm\nVq4s1VDrVsy7cu5c+0TS5PT4FBgKnNDyTTMza1p9nUo+yiHpSkkTJI0uKltU0lBJr6efPVK5JA2W\n9IakFyVtULTPwan+65IObu68JQOvsrsm1gOWSI8eEbFSRNxS1rsyM2sBhR5vqUeZrgb6NSgbCAyL\niF7AsPQaskV+e6XHAOBiyAI1MAjYFNgEGFQI1k0pGXgjIoAhETErPZpckcLMrGpUmCin6Uc5IuIR\nYHKD4t2Ba9Lza4D+ReXXRuYpoLukpYEfAkMjYnJEfEKWFWgYzOdQznXBUZJ6l/c2zMxanoAOdSr5\nmA89I2J8ev4h317TWpY5R3SNS2VNlTep1JprHSJiJtAbeFbSm8BXZO85ImKDpvY1M2tpZfRqF5c0\nouj1pRFx6dycIyJCUsW/6Zca1fAMsAGwW6VPamY2f0Rd88PJJkbERvNw8I8kLR0R41MqYUIqfx/4\nXlG95VLZ+0CfBuXDS52gVKpBABHxZmOPuXsfZmaVI7XofLx3AoWRCQcDdxSVH5RGN2wGfJZSEvcB\nfSX1SBfV+qayJpXq8S4h6ddNbYyIc8p8E2ZmFVeJW4Yl3UjWW11c0jiy0QlnALdIOgx4B9g7VR8C\n7Ay8AUwBfgYQEZMl/RF4NtU7NSIaXrCbQ6nAWw90hRzfHmJmbZKozOxkEbFfE5t+0EjdAI5u4jhX\nAleWe95SgXd8RJxa7oHMzKqprc7Hm993ZWZtmmi7K1B8p6ttZtYq5HyV4SYDb3PJYTOzWhFQ3xYD\nr5lZa5bfsOvAa2Y5leMOrwOvmeWPkFMNZmbV1iYvrpmZtWb5DbsOvGaWQ5JHNZiZVZ1TDWZmVZbf\nsOvAa2Y5leMOrwOvmeWP71wzM6s6oRwnGxx4zSyXctzhdeA1s/zxcDIzsxrIcdzN9VzCVgHTvv6a\nvXfelv47bMaufTbi/LNPA+Cpx4bz475b8qPtNmbgsQOYOXMmAMPuvYvdf7Ape+ywOXv225qRTz9R\ny+a3aa+9+iqbbrj+N48lF12Y8887t9bNajXUzH+tmXu87VynBRbgqn/eTZcuXZkxYwY/7b8jW/XZ\ngROOPYIrb7mLFVfuxeCz/sjtt1zPnvsfzGZb92H7H+6CJF59eTS/OuJAhjz6fK3fRpu06mqr8fTI\nUQDMmjWLlZdflt3671HjVrUOeR/V4B5vOyeJLl26AjBzxgxmzJhBXX09HTt1YsWVewGwxbbbc/+Q\nbIXrLl26fnPH0JQpX+X67qE8eejBYay40sosv/zytW5KqyGVfrRmDrzGrFmz2GOHzdlq3RXZYpvt\nWbf3RsycOZPRLzwHwP133c6HH4z7pv7Qe+5k5617c9RBe3LaORfXqtntyj9vvom992lqQdz2Kc+p\nhqoEXkknShoj6UVJoyRtWuHjVyzRKKm3pCvS856S7pL0gqSXJQ1J5UtIurdS56y1+vp6bnvgSR4a\n+SovjRrB66++zF8vvpozBh3P3jtvS+euXamvq/+m/o477caQR5/n/CtvZPBZf6xhy9uH6dOnc/dd\nd/LjPfeqdVNajcJ8vKUerVmL53glbQ7sCmwQEdMkLQ50quQ5ImKLCh7ud8Bp6fmpwNCIOA9A0rrp\nfB9LGi9py4h4vILnrqmFF+nOJltsw2MPPcChRx3LdbcPBeDx4cN45603vlN/4822Yty7/+WTSRPp\nsdji1W5uu3Hfvfewfu8N6NmzZ62b0nrkIJ1QSjV6vEsDEyNiGkBETIyIDwAkbSjpYUkjJd0naelU\nPlzSmZKekfSapK1T+VqpbFTqPfdK5V+mn33SvrdKGivpeqUkpKSdU9lISYMl3dWwoZK6AetGxAtF\nbf/mO3ZEvFhU/XbggMp+VNU3edLHfP7ZpwB8PXUqTz7yICuusiqTJk4AYPq0aVx+0Tnsc+BhALzz\n9ptEBABjXhzF9OnT6L7oYrVpfDtxy803Os3QCDXzaM2qMarhfuAPkl4DHgBujoiHJXUEzgd2Tz3I\nfYDTgUMLbYuITSTtDAwCdgCOBM6LiOsldQLqv3M26A2sBXwAPA5sKWkE8Hdgm4h4W9KNTbR1I2B0\n0esLgZslHZPaflXhjwYwgm97xnOQNAAYALDMst8r+eHU2scffcQJxw5g1uxZzJ49m34/+jHb7bgT\nZ596IsMfuIfZs4N9D/45m23VB4D7776DO269gY4dOrLAQgtxzsXX+AJbC/rqq6948IGhXHDR32vd\nlFYl76MaVOi9tOhJpHpga2A74AhgIFngegJ4K1WrB8ZHRF9Jw4ETI+JxST2BxyNiFUn7AycC1wL/\njojX0/G/jIiukvqk/XZM5ReTBd/RZAF721S+GzAgInZt0M79yYLzkUVliwL9gJ2AvsDa6Q9FR+DD\niCjZ3Vt7vQ3i1nsfnYdPzSplhSW61LoJ7d5CHTUyIjaq1PHWWKd3XHX7QyXrbL5Kj4qes5KqcnEt\nImZFxPCIGAQcA/yE7I/WmIhYPz3WiYi+RbtNSz9nkXrmEXEDsBswFRgiaftGTjet6Pk3+5ZpKrBg\ng7ZPjogbIuJA4Flgm7RpwVTfzGrAoxpKkLRaIRebrA+8A7wKLJEuviGpo6S1mjnWSsBbETEYuANY\nt8xmvAqsJGmF9HqfJuq9AqxSdL7tJXVOz7sBKwPvps2rMmdawsyqqE6lH61ZNXK8XYHzJXUHZgJv\nkH3Nny5pT2CwpEVSW84FxpQ41t7AgZJmAB8CfyqnARExVdL/APdK+oqs59pYvbGSFpHULSK+ADYE\nLpA0k+yP1OURUdh3O+Ducs5vZi2glQfXUlo88EbESKDR4V4RMYpvv7oXl/cpej4RWCE9PwM4o5H6\nXdPP4cDwovJjiqo9FBGrp1EOF5LlmBtzJVmP+PKIOBs4u4l6uwG7N7HNzFpQNnIhv5G3Pd25drik\nUWQ96kXIRjk05mLmzBN/h6QlgHMi4pPKNtHMytJMmqHcVIOk/0p6KQ1RHZHKFpU0VNLr6WePVK40\nFPWNNJx1g3ltfrsJvBHxt3QRb82IOCAipjRR7+uI+Eczx/o4Im5vmZaaWVkqN5B3uxQbCiMgBgLD\nIqIXMCy9hmxkU6/0GEDWSZsn7Sbwmllb0tyYhvlKQ+wOXJOeXwP0Lyq/NjJPAd0LN33NLQdeM8sd\nUVaqYXFJI4oeAxo5VAD3pztaC9t7RsT49PxDoHCv9rLAe0X7jktlc83z8ZpZPjXfqZ1Yxg0UW0XE\n+5KWBIZKGlu8MSJCUsXvMnOP18xyqRKphoh4P/2cANwGbAJ8VDRvzNLAhFT9faB4DoDlUtlcc+A1\ns1ya34nQJXVJN0YhqQvZlACjgTuBg1O1g8lu1iKVH5RGN2wGfFaUkpgrTjWYWf5UZlrInsBtaZKn\nDsANEXGvpGeBWyQdRnaX7d6p/hBgZ7KbwKYAP5vXEzvwmlkuze8NFBHxFrBeI+WTgB80Uh7A0fN1\n0sSB18xyR+R7InQHXjPLJQdeM7Mqy/NcDQ68ZpZL7vGamVWZA6+ZWRXlfVpIB14zy5+cL+/uwGtm\nueTAa2ZWVa1/QctSHHjNLJfc4zUzqyLfuWZmVgNONZiZVZl7vGZm1TQXKwm3Rg68ZpZT+Y28Drxm\nlju+uGZmVgNONZiZVZlHNZiZVVt+464Dr5nljzyqwcys+pxqMDOrtvzGXQdeM8unHMddB14zyyNR\nl+OBvA68ZpY7eb+Boq7WDTAza2/c4zWzXHKqwcysmrzYpZlZdQmPajAzqzrluMvrwGtmuZTjuOvA\na2b5lOO468BrZvmU51SDIqLWbWjTJH0MvFPrdsynxYGJtW5EO5f3f4PlI2KJSh1M0r1kn0kpEyOi\nX6XOWUkOvNYsSSMiYqNat6M9879B2+I718zMqsyB18ysyhx4rRyX1roB5n+DtsQ5XjOzKnOP18ys\nyhx4zcyqzIHXqkJ5Hu1uVmEOvFYVkS4mOABXj6TlJG1d63bYd/mWYWtRko4DFgUeAR6LiC8l1UXE\n7Bo3rT1YBThJ0lDg84i4uNYNsoxHNViLkrQosDewLLA1sFdEfCxJ4f/5WoSk5YDpETFB0jLA2sBh\nZL/ve9e2dQYOvNZCJF0EjImICwtBVtIZwG5Av4h41z3fypO0BnAT2bjfSyNiRirvCNwDfBERe9Sw\niYZzvNZybgP+JOmgQs82IgYC/wKGSlosImY751s5klYGrgXOiogLC0EXICJmRMQOqd7xtWqjZRx4\nreJSD3co0B84X9IhhW0R8Xvg38Dpkjo63VBR/YAnIuJ6AEnrSDpa0jaSlkp1zgS6SlqgZq00X1yz\nypF0KbAW8B9Jt0XEQ+mq+sOSZhQCAvB34AigIzCjicNZmST1iIhPgI+A1SRtABwJdCe7wPYJ2R+7\nC4G3gQ2ALYCHatNic4/XKkJSPfA5sDBZz+vvki4H1gN+CVwqaddU/QOgB7BtLdralqTP/feS1gKe\nBBYDzgKWAS6PiA2APwH7Slo4Ij4CTgLqneapHfd4bb5J2h94GPgb8BnwBfAVWSA4GXgRWAi4U9JW\nEfGEpN8AnWrT4jZlNvApsGxEjJE0AFgwIiYV1fmc7N+j8Hm/CNQ5zVM7Drw2XyR1JksvPB8Rr0i6\nCdifbPjYUxGxZ6o3Flg6Ip7CjzQ6AAALtElEQVQAiIivyIKBzYc0WmQkcK6kvSNiNOlzldQB2BI4\nDxgUERPTPrOAWbVqs3k4mVWApKOBPYC9I2KypJWAnwJdgXsj4sEG9T2MrMIk/RJYA/hzRPw3XTzb\nFRgAXBgRd3rsdOvhwGsVIel0sq+8F0XEV0XBdxlgcES8XNMGtnGSVgf2A5YEzo+IlyUtDCwSEe85\n6LYuvrhmlfIEWZA9QFK3iHgLuIWsx+ug20LSxTUiYizwT+BN4BpJ2wGdI+K9tN1BtxVxj9fmS9Fd\naXVkud31yYaJnZyGOM1Rr1btbEsk9QZ2iIiz0+sOETGzaPsewE7Aa8DDEfFsbVpqTXHgtbJJqk8X\nZhotT8F3bWBPsqFiF5BddHujyk1tc4r+wG0F7AP8ALgkIgan7XP820haBJgKdEwXMq0VceC1sjTo\n2f4VGAm8ExGPpu0Nf/H7kF1dfzMiJteizW1N+kyvBX4NrEn2R+75iPhz2u6Lljnh4WTWrAa/0IOB\n7wHTgB0kLR4RtxX1eCMZXqv2tmErAedExK3pwtmGwCmSvoiICxx088MX16xZhclsJN0BfBIRu5Pd\nLDEM6J9yikTEbOdxK6eRO8tmAkdIWioiPie7QeV9YHtJP656A22eOfBak1IPFvjmqvhM4GhJXdKt\np8OAB4HDJG1Yo2a2WYWcrqRfSloFuAG4Drgwzbm7Gtkk82+RfQuxnHCO1xpVdMFMZHemvZJeXwZs\nBvSOiJmSvgcsHxGP1bTBbUghtZMupF0MvEqWFrwZeA7Yl+zmCAEHAZuS3aF2BOBvHTngwGtNSj3e\n24EFyS6UPRgR50u6mOwXvXeDC2oeMjYf0iQ2n6fna5Pd6vubiBgl6XCgN/BIRNwkqVvabSOy2d76\ne7x0fjjVYHNI9/cXnAa8ERF9gWuAZSQdERFHkeUWTyne10F33qU5L+6S1DMVrUA2aqGQP78MGAHs\nKumnZEPFFiIbtuegmzPu8do3JP0WeCgiRqTXFwEvRcTF6d7/PYCfRMRetWxnWyWpO9nkQuukXu3u\nZHMt3BERl6Y6hwNPpslwkLRAREyrWaNtnrjHa8Xuj4gRabwowF1AX0lbpF/uW4CF0xIzgJdrr4TC\nRcyI+BRYCrhB0l4RcQdwCbCTpGNSncsiYnTRPg66OeRxvIakzhExJSJeULZY4iWSBpHNvzAMGCTp\nHrJVgt+JiDcL+zq9MH9SXny2pO3JLowNS8/vTBfZbk7pn8PTcL5xaZy0x+zmmHu87VxaueBHkpaW\ndDfwMXA82VfcjcgWpzyLbNjS4xExIO3nnm4FpCFjO5FdIFMqG062GvOFkn4aEbcBh0TEe/5D1zY4\nx9uOpakb3yFbj2tDslTDoWnb7sAvyJaPubHBfr41tUIkLQ4MAX4VEY9L2pRslrchZMPE7iW7Y+0j\nB922w6mGdkrSbkCniHhL0o3AcsA4ST2AqRFxR+rU/knSfyPiycK+DroV9QVZSmcPSUeSTR7fFVgp\nIv4q6Xsx5zI+1ga4x9tOpTkWJko6kGydtPuAfwDvAqdExBeSliWb0/X1Wra1LSmabGgNsvXS3iK7\nIWVbslTOQ8rWsNudbCL5SDeqeIx0G+LA284U/wKnsaOnAwFcTjY290qyYLAd8GJR6sG/+BUi6YfA\n1WTLq/ckWzJpUtq2FXARcHxE3FOzRlqLcuBtpySdRDZiYQzwK6A7WfB9B+gPdIuIi2vXwrZJ0ppk\nFy5viWy15bOAHYAfAtPJZn+7NSL+U8NmWgtz4G0niufLlbQUcDDZHAyDyVYq+CVZ8L2tMMduqusL\naRWgbImehYDbyHK4R0TEi2nbGWSphS2AmSnN428YbZiHk7UTRRPeEBEfkk248jRZwF2ZLAAH2UW2\n4v0cdOdD0bC7DhHxJfAzsiF7O6dVIoiIgWSjF9aMiC9SmYNuG+Yebzsi6VTgxxGxdnq9AnA42bLg\nfwLGRMTUmjWwjSm6kNYPOIzsm8VTwPNkufT7gCujaG06ax/c423DJG2W5m1F0vER8QfgA0kPAETE\nf8mGMnUGNi4EXd8cURkp6P6A7I/auWQX0o6JiHHAsWRzXxzZYGIiawcceNu2BYHhkh4nG5RPmmls\ntqQH00xYBwL3FV9I89fceSdpGUkrFv3xWorsW8WCwDpkF9YA3gYOAYZF0QrB1j448LZBRROoDAdG\nkS2MeGVhewq+HwHnA9Mi4m9pP/d054Ok1YGhZLdaF+bLXRi4lWyKzZ0j4p00nOwE4O2IeKYmjbWa\nco63jSlaOaKwisFyZIPzBwEDUjAuBFkVLp559ML8Sfnyu4C/RcQVReV1ZMP0ukfEj9MEOBcCv/Y4\n3fbLuaU2pDjoAv+QNB24PiKuT2VXpPlcTwDujIjz035y0J1v25GlDa5In/W6ZHMtfEL2zeJQScPI\nfueOc9Bt3xx424gUPAtDxgYD75H90h8iabmIuFrSNLLxu6MLQRec062Qt4CfpzTCPmRjdtchG8XQ\nNyJ+noaPKSI+9Tjd9s2Btw2Q1KeQQgBOBDaLiI3StgOA7VL69kay1QympW1OL1TOs8A/gTOBN8jW\nSxtNtvrvccpWivisUNlBt33zxbWcS7nFB9PMVgAvAItJOgEgIq4HhpOtSrtJUdB1eqGCIptI/lxg\n+4jYMyIeTeNze5BN67hobVtorYl7vDkXEf+VtAlwr6SZEXG5pK+BoyQdGxHnRcR1kt6KiCeK9nOP\nqwVExGQASR2BHYE/A7+LiPE1bZi1Kg68bUBk66TtBNwviRR8AY6W1C0iTisEXecWW14KupsAvwZO\nioi7a9wka2UceNuIiHhWUl+y4Bvp6vqCZPMwFNdz0G1hETFD0jPATyPiQ/+xs4YceNuQFHx3JAu+\nXSJicGGbf/mrKyJmAB+m5/7cbQ6+uNbGRMQIsgtpazYo9y+/WSvhO9fMzKrMPV4zsypz4DUzqzIH\nXjOzKnPgNTOrMgdeM7Mqc+C1ipM0S9IoSaMl/VNS5/k4Vh9Jd6Xnu0kaWKJud0n/Mw/nOFnSceWW\nN6hztaQ95+JcK0gaPbdttLbFgddawtSIWD8tqjkdOLJ4ozJz/f9eRNwZEWeUqNIdmOvAa1ZtDrzW\n0h4FVkk9vVclXUuaLlFSX0lPSnou9Yy7AkjqJ2mspOeAHxcOJOkQSRek5z0l3SbphfTYAjgDWDn1\nts9O9X4r6VlJL0o6pehYJ0p6TdJjwGrNvQlJh6fjvCDpXw168TtIGpGOt2uqXy/p7KJzHzG/H6S1\nHQ681mKUrZ67E/BSKuoFXBQRawFfAScBO0TEBsAI4NdpfonLgB8BG5ItFtmYwcDDEbEesAEwBhgI\nvJl6279Nc1f0IpuwZn1gQ0nbSNoQ2DeV7QxsXMbb+XdEbJzO9wrZcu0FK6Rz7AJckt7DYcBnEbFx\nOv7hklYs4zzWDniuBmsJC0kalZ4/ClxBtsrxOxHxVCrfjOy25sfTTGqdgCeB1ckWgXwdQNJ1fLsy\nb7HtgYMAImIW8JmkHg3q9E2P59PrrmSBuBtwW0RMSee4s4z3tLak08jSGV2B+4q23ZLmNn5d0lvp\nPfQF1i3K/y6Szv1aGeeyNs6B11rC1IhYv7ggBdeviouAoRGxX4N6c+w3nwT8OSL+3uAcv5yHY10N\n9I+IFyQdAvQp2tbwvvtI5/7fiCgO0IWJ662dc6rBauUpYEtJqwBI6iJpVWAssIKkwnSW+zWx/zDg\nqLRvfVrP7Au+XVYdsl7poUW542UlLQk8AvSXtJCkbmRpjeZ0A8anuXYPaLBtL0l1qc0rAa+mcx+V\n6iNpVUldyjiPtQPu8VpNRMTHqed4o6QFUvFJEfGapAHA3ZKmkKUqujVyiGOBSyUdBswCjoqIJyU9\nnoZr3ZPyvGsAT6Ye95dkc+Q+J+lmsmWSJpCtl9ac3wNPAx+nn8Vtehd4BlgYODIivpZ0OVnu9zll\nJ/8Y6F/ep2NtnWcnMzOrMqcazMyqzIHXzKzKHHjNzKrMgdfMrMoceM3MqsyB18ysyhx4zcyq7P8B\nFeUUR21ufMMAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f5cb09d26a0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "FT: Feeling (F) - Thinking (T) ...\n",
      "* FT: Feeling (F) - Thinking (T) Accuracy: 74.19%\n",
      "Confusion matrix, without normalization\n",
      "[[1194  360]\n",
      " [ 379  930]]\n"
     ]
    },
    {
     "data": {
      "image/png": "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\nAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f5cb09d2ac8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "JP: Judging (J) – Perceiving (P) ...\n",
      "* JP: Judging (J) – Perceiving (P) Accuracy: 65.42%\n",
      "Confusion matrix, without normalization\n",
      "[[ 429  690]\n",
      " [ 300 1444]]\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n+X+CByOCarMXVQAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f5cb09d2dd8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "import itertools\n",
    "import re\n",
    "\n",
    "# setup parameters for xgboost\n",
    "param = {}\n",
    "\n",
    "param['n_estimators'] = 200\n",
    "param['max_depth'] = 2\n",
    "param['nthread'] = 8\n",
    "param['learning_rate'] = 0.2\n",
    "\n",
    "# Let's train type indicator individually\n",
    "for l in range(len(type_indicators)):\n",
    "    print(\"%s ...\" % (type_indicators[l]))\n",
    "    \n",
    "    Y = list_personality[:,l]\n",
    "\n",
    "    # split data into train and test sets\n",
    "    seed = 7\n",
    "    test_size = 0.33\n",
    "    X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=test_size, random_state=seed)\n",
    "\n",
    "    # fit model on training data\n",
    "    model = XGBClassifier(**param)\n",
    "    model.fit(X_train, y_train)\n",
    "    # make predictions for test data\n",
    "    y_pred = model.predict(X_test)\n",
    "    predictions = [round(value) for value in y_pred]\n",
    "    # evaluate predictions\n",
    "    accuracy = accuracy_score(y_test, predictions)\n",
    "    print(\"* %s Accuracy: %.2f%%\" % (type_indicators[l], accuracy * 100.0))\n",
    "    \n",
    "    #confusion matrix\n",
    "    cm = confusion_matrix(y_test, predictions)\n",
    "    cm_class = re.split(' / | – |: | - ', type_indicators[l])\n",
    "    plot_confusion_matrix(cm, [cm_class[1], cm_class[2]], title=\"Confusion Matrix\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_cell_guid": "d73069a6-5a53-402c-83ac-9fdad4673132",
    "_uuid": "a9aa3cefd0fc2e27b66a276dec108eed7eae8449"
   },
   "source": [
    "## 13. XGBoost Hyperparameter Tuning\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "_cell_guid": "166157f6-c857-4ca7-8202-524ccc79eae8",
    "_uuid": "bb69ead05063fe85c8187a32525cfd8180f3a413",
    "execution": {
     "iopub.execute_input": "2022-12-07T13:39:27.581968Z",
     "iopub.status.busy": "2022-12-07T13:39:27.580726Z",
     "iopub.status.idle": "2022-12-07T13:47:21.730239Z",
     "shell.execute_reply": "2022-12-07T13:47:21.673853Z",
     "shell.execute_reply.started": "2022-12-07T13:39:27.581870Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "IE: Introversion (I) / Extroversion (E) ...\n",
      "hello\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-30-8679bcc4ecc6>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     35\u001b[0m     \u001b[0mkfold\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mStratifiedKFold\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn_splits\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mshuffle\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrandom_state\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m7\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     36\u001b[0m     \u001b[0mgrid_search\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mGridSearchCV\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparam_grid\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mscoring\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"neg_log_loss\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcv\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mkfold\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 37\u001b[0;31m     \u001b[0mgrid_result\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgrid_search\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mY\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     38\u001b[0m     \u001b[0;31m# summarize results\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     39\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"* Best: %f using %s\"\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mgrid_result\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbest_score_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgrid_result\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbest_params_\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/conda/lib/python3.6/site-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, groups, **fit_params)\u001b[0m\n\u001b[1;32m    637\u001b[0m                                   error_score=self.error_score)\n\u001b[1;32m    638\u001b[0m           for parameters, (train, test) in product(candidate_params,\n\u001b[0;32m--> 639\u001b[0;31m                                                    cv.split(X, y, groups)))\n\u001b[0m\u001b[1;32m    640\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    641\u001b[0m         \u001b[0;31m# if one choose to see train score, \"out\" will contain train score info\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/conda/lib/python3.6/site-packages/sklearn/externals/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m    787\u001b[0m                 \u001b[0;31m# consumption.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    788\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_iterating\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 789\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mretrieve\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    790\u001b[0m             \u001b[0;31m# Make sure that we get a last message telling us we are done\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    791\u001b[0m             \u001b[0melapsed_time\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_start_time\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/conda/lib/python3.6/site-packages/sklearn/externals/joblib/parallel.py\u001b[0m in \u001b[0;36mretrieve\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    697\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    698\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'supports_timeout'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 699\u001b[0;31m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_output\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mextend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mjob\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    700\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    701\u001b[0m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_output\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mextend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mjob\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/conda/lib/python3.6/multiprocessing/pool.py\u001b[0m in \u001b[0;36mget\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    636\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    637\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 638\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    639\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mready\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    640\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mTimeoutError\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/conda/lib/python3.6/multiprocessing/pool.py\u001b[0m in \u001b[0;36mwait\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    633\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    634\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mwait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 635\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_event\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    636\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    637\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/conda/lib/python3.6/threading.py\u001b[0m in \u001b[0;36mwait\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    549\u001b[0m             \u001b[0msignaled\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_flag\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    550\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0msignaled\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 551\u001b[0;31m                 \u001b[0msignaled\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_cond\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    552\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0msignaled\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    553\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/conda/lib/python3.6/threading.py\u001b[0m in \u001b[0;36mwait\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    293\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m    \u001b[0;31m# restore state no matter what (e.g., KeyboardInterrupt)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    294\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mtimeout\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 295\u001b[0;31m                 \u001b[0mwaiter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0macquire\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    296\u001b[0m                 \u001b[0mgotit\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    297\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "# Tune learning_rate\n",
    "from numpy import loadtxt\n",
    "from xgboost import XGBClassifier\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.model_selection import StratifiedKFold\n",
    "\n",
    "# Posts in tf-idf representation\n",
    "X = X_tfidf\n",
    "\n",
    "# setup parameters for xgboost\n",
    "param = {}\n",
    "param['n_estimators'] = 200\n",
    "param['max_depth'] = 2\n",
    "param['nthread'] = 8\n",
    "param['learning_rate'] = 0.2\n",
    "\n",
    "\n",
    "# Let's train type indicator individually\n",
    "for l in range(len(type_indicators)):\n",
    "    print(\"%s ...\" % (type_indicators[l]))\n",
    "    \n",
    "    Y = list_personality[:,l]\n",
    "    model = XGBClassifier(**param)\n",
    "    # learning_rate = [0.0001, 0.001, 0.01, 0.1, 0.2, 0.3]\n",
    "    # param_grid = dict(learning_rate=learning_rate)\n",
    "    \n",
    "    print(\"hello\")\n",
    "    param_grid = {\n",
    "        'n_estimators' : [ 200, 300],\n",
    "        'learning_rate': [ 0.2, 0.3]\n",
    "        # 'learning_rate': [ 0.01, 0.1, 0.2, 0.3],\n",
    "        # 'max_depth': [2,3,4],\n",
    "    }\n",
    "    \n",
    "    kfold = StratifiedKFold(n_splits=10, shuffle=True, random_state=7)\n",
    "    grid_search = GridSearchCV(model, param_grid, scoring=\"neg_log_loss\", n_jobs=-1, cv=kfold)\n",
    "    grid_result = grid_search.fit(X, Y)\n",
    "    # summarize results\n",
    "    print(\"* Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\n",
    "    means = grid_result.cv_results_['mean_test_score']\n",
    "    stds = grid_result.cv_results_['std_test_score']\n",
    "    params = grid_result.cv_results_['params']\n",
    "    for mean, stdev, param in zip(means, stds, params):\n",
    "        print(\"* %f (%f) with: %r\" % (mean, stdev, param))\n",
    "    \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_cell_guid": "9ca7571e-08f4-4cce-ba69-7b3365565298",
    "_uuid": "479b0141e11762e3548f930a681de7cd11d8d362"
   },
   "source": [
    "## 14. Predict own Myers-Briggs Personality Type "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "_cell_guid": "6868eb62-4dea-4eb1-bba2-b97a893f0354",
    "_uuid": "efb774df6b5a342253f662189c1673c20813913a",
    "execution": {
     "iopub.status.busy": "2022-12-07T13:47:21.675020Z",
     "iopub.status.idle": "2022-12-07T13:47:21.675506Z"
    }
   },
   "outputs": [],
   "source": [
    "# A few few tweets and blog post\n",
    "my_posts  = \"\"\"Getting started with data science and applying machine learning has never been as simple as it is now. There are many free and paid online tutorials and courses out there to help you to get started. I’ve recently started to learn, play, and work on Data Science & Machine Learning on Kaggle.com. In this brief post, I’d like to share my experience with the Kaggle Python Docker image, which simplifies the Data Scientist’s life.\n",
    "Awesome #AWS monitoring introduction.\n",
    "HPE Software (now @MicroFocusSW) won the platinum reader's choice #ITAWARDS 2017 in the new category #CloudMonitoring\n",
    "Certified as AWS Certified Solutions Architect \n",
    "Hi, please have a look at my Udacity interview about online learning and machine learning,\n",
    "Very interesting to see the  lessons learnt during the HP Operations Orchestration to CloudSlang journey. http://bit.ly/1Xo41ci \n",
    "I came across a post on devopsdigest.com and need your input: “70% DevOps organizations Unhappy with DevOps Monitoring Tools”\n",
    "In a similar investigation I found out that many DevOps organizations use several monitoring tools in parallel. Senu, Nagios, LogStach and SaaS offerings such as DataDog or SignalFX to name a few. However, one element is missing: Consolidation of alerts and status in a single pane of glass, which enables fast remediation of application and infrastructure uptime and performance issues.\n",
    "Sure, there are commercial tools on the market for exactly this use case but these tools are not necessarily optimized for DevOps.\n",
    "So, here my question to you: In your DevOps project, have you encountered that the lack of consolidation of alerts and status is a real issue? If yes, how did you approach the problem? Or is an ChatOps approach just right?\n",
    "You will probably hear more and more about ChatOps - at conferences, DevOps meet-ups or simply from your co-worker at the coffee station. ChatOps is a term and concept coined by GitHub. It's about the conversation-driven development, automation, and operations.\n",
    "Now the question is: why and how would I, as an ops-focused engineer, implement and use ChatOps in my organization? The next question then is: How to include my tools into the chat conversation?\n",
    "Let’s begin by having a look at a use case. The Closed Looped Incidents Process (CLIP) can be rejuvenated with ChatOps. The work from the incident detection runs through monitoring until the resolution of issues in your application or infrastructure can be accelerated with improved, cross-team communication and collaboration.\n",
    "In this blog post, I am going to describe and share my experience with deploying HP Operations Manager i 10.0 (OMi) on HP Helion Public Cloud. An Infrastructure as a Service platform such as HP Helion Public Cloud Compute is a great place to quickly spin-up a Linux server and install HP Operations Manager i for various use scenarios. An example of a good use case is monitoring workloads across public clouds such as AWS and Azure.\n",
    "\"\"\"\n",
    "\n",
    "# The type is just a dummy so that the data prep fucntion can be reused\n",
    "mydata = pd.DataFrame(data={'type': ['INFJ'], 'posts': [my_posts]})\n",
    "\n",
    "my_posts, dummy  = pre_process_data(mydata, remove_stop_words=True)\n",
    "\n",
    "my_X_cnt = cntizer.transform(my_posts)\n",
    "my_X_tfidf =  tfizer.transform(my_X_cnt).toarray()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_cell_guid": "09a3383d-8e7d-4bad-9e22-e66251c1abe4",
    "_uuid": "bc8128f03e16622d6a340db9fb654b48d2dacef0"
   },
   "source": [
    "## 15. Fit and predict the 4 type indicators:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "_cell_guid": "8a75daf8-c835-473b-809f-5afba651d6f1",
    "_uuid": "2a365ca5f617519491f2eb0b2d909b18e8758de8",
    "execution": {
     "iopub.status.busy": "2022-12-07T13:47:21.676110Z",
     "iopub.status.idle": "2022-12-07T13:47:21.676496Z"
    }
   },
   "outputs": [],
   "source": [
    "# setup parameters for xgboost\n",
    "param = {}\n",
    "param['n_estimators'] = 200\n",
    "param['max_depth'] = 2\n",
    "param['nthread'] = 8\n",
    "param['learning_rate'] = 0.2\n",
    "\n",
    "result = []\n",
    "# Let's train type indicator individually\n",
    "for l in range(len(type_indicators)):\n",
    "    print(\"%s ...\" % (type_indicators[l]))\n",
    "    \n",
    "    Y = list_personality[:,l]\n",
    "\n",
    "    # split data into train and test sets\n",
    "    seed = 7\n",
    "    test_size = 0.33\n",
    "    X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=test_size, random_state=seed)\n",
    "\n",
    "    # fit model on training data\n",
    "    model = XGBClassifier(**param)\n",
    "    model.fit(X_train, y_train)\n",
    "    \n",
    "    # make predictions for my  data\n",
    "    y_pred = model.predict(my_X_tfidf)\n",
    "    result.append(y_pred[0])\n",
    "    # print(\"* %s prediction: %s\" % (type_indicators[l], y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_cell_guid": "f05c1173-e4a8-4260-afc4-a2ffe6df68ea",
    "_uuid": "e27b7f6379e1246d68c8c6542327becca15f02be"
   },
   "source": [
    "## 16. Show result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "_cell_guid": "2ffb4395-a9f2-408e-a7b4-d7d91281e51e",
    "_uuid": "ea10e21f587244beff55e25d0986d8912e02ac36",
    "execution": {
     "iopub.status.busy": "2022-12-07T13:47:21.677140Z",
     "iopub.status.idle": "2022-12-07T13:47:21.677528Z"
    }
   },
   "outputs": [],
   "source": [
    "print(\"The result is: \", translate_back(result))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_cell_guid": "edc0a8bd-9f0a-414c-b13a-4fc777691167",
    "_uuid": "e6e8f8a5825e562b25b8cd6251027535ea691605"
   },
   "source": [
    "Wow, the result is very, very close to the real Myers-Briggs assessment that I did a few years back. Only one indicator is different. Any guess? ;-)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "_cell_guid": "1a5c85fb-5cce-4220-943b-820bb741b531",
    "_uuid": "c438fa213ace6947606d098e0f1b6aa6ab27e0cf",
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    }
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}